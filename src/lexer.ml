# 2 "lexer.mll"
         
        open Parser        (* The type token is defined in parser.mli *)
        exception Eof
        
# 7 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\230\255\004\000\000\000\000\000\002\000\002\000\002\000\
    \001\000\007\000\007\000\001\000\006\000\003\000\004\000\248\255\
    \249\255\250\255\251\255\252\255\253\255\023\000\255\255\244\255\
    \245\255\004\000\002\000\243\255\000\000\007\000\006\000\242\255\
    \011\000\231\255\241\255\009\000\240\255\239\255\238\255\019\000\
    \017\000\025\000\237\255\236\255\235\255\027\000\019\000\234\255\
    \030\000\016\000\031\000\233\255\232\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\009\000\008\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\001\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\255\255\000\000\000\000\000\000\255\255\
    \255\255\255\255\000\000\000\000\000\000\255\255\255\255\000\000\
    \255\255\255\255\255\255\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\022\000\022\000\000\000\000\000\022\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \016\000\015\000\018\000\020\000\000\000\019\000\000\000\017\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\000\000\000\000\014\000\007\000\013\000\038\000\
    \024\000\023\000\000\000\000\000\000\000\000\000\011\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\009\000\028\000\000\000\005\000\002\000\044\000\027\000\
    \045\000\004\000\039\000\031\000\029\000\036\000\010\000\008\000\
    \049\000\043\000\048\000\037\000\003\000\035\000\032\000\006\000\
    \025\000\026\000\030\000\033\000\040\000\041\000\042\000\034\000\
    \046\000\047\000\052\000\050\000\051\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\255\255\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\000\000\000\000\007\000\
    \013\000\014\000\255\255\255\255\255\255\255\255\000\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\011\000\255\255\000\000\000\000\004\000\026\000\
    \003\000\000\000\006\000\030\000\028\000\035\000\000\000\000\000\
    \002\000\005\000\002\000\008\000\000\000\009\000\010\000\000\000\
    \012\000\025\000\029\000\032\000\039\000\040\000\041\000\032\000\
    \045\000\046\000\048\000\049\000\050\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 7 "lexer.mll"
                                    ( token lexbuf )
# 130 "lexer.ml"

  | 1 ->
let
# 8 "lexer.mll"
                           lxm
# 136 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 8 "lexer.mll"
                                    ( NUMBER( int_of_string lxm) )
# 140 "lexer.ml"

  | 2 ->
# 9 "lexer.mll"
                                    ( PLUS )
# 145 "lexer.ml"

  | 3 ->
# 10 "lexer.mll"
                                    ( MINUS )
# 150 "lexer.ml"

  | 4 ->
# 11 "lexer.mll"
                                    ( TIMES )
# 155 "lexer.ml"

  | 5 ->
# 12 "lexer.mll"
                                    ( DIV )
# 160 "lexer.ml"

  | 6 ->
# 13 "lexer.mll"
                                    ( LPAREN )
# 165 "lexer.ml"

  | 7 ->
# 14 "lexer.mll"
                                    ( RPAREN )
# 170 "lexer.ml"

  | 8 ->
# 15 "lexer.mll"
                                    ( LESS )
# 175 "lexer.ml"

  | 9 ->
# 16 "lexer.mll"
                                    ( GREATER )
# 180 "lexer.ml"

  | 10 ->
# 17 "lexer.mll"
                                    ( GREATEREQUAL )
# 185 "lexer.ml"

  | 11 ->
# 18 "lexer.mll"
                                    ( LESSEQUAL )
# 190 "lexer.ml"

  | 12 ->
let
# 19 "lexer.mll"
                       lxm
# 196 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 4) in
# 19 "lexer.mll"
                                    ( BOOLEAN(bool_of_string (String.lowercase_ascii lxm) ))
# 200 "lexer.ml"

  | 13 ->
let
# 20 "lexer.mll"
                         lxm
# 206 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 5) in
# 20 "lexer.mll"
                                    ( BOOLEAN(bool_of_string (String.lowercase_ascii lxm) ) )
# 210 "lexer.ml"

  | 14 ->
# 21 "lexer.mll"
                                    ( NEGATION )
# 215 "lexer.ml"

  | 15 ->
# 22 "lexer.mll"
                                    ( AND )
# 220 "lexer.ml"

  | 16 ->
# 23 "lexer.mll"
                                    ( OR )
# 225 "lexer.ml"

  | 17 ->
# 24 "lexer.mll"
                                    ( EQUALS )
# 230 "lexer.ml"

  | 18 ->
# 25 "lexer.mll"
                                    ( LOOP )
# 235 "lexer.ml"

  | 19 ->
# 26 "lexer.mll"
                                    ( DO )
# 240 "lexer.ml"

  | 20 ->
# 27 "lexer.mll"
                                    ( IF )
# 245 "lexer.ml"

  | 21 ->
# 28 "lexer.mll"
                                    ( THEN )
# 250 "lexer.ml"

  | 22 ->
# 29 "lexer.mll"
                                    ( ELSE )
# 255 "lexer.ml"

  | 23 ->
# 30 "lexer.mll"
                                    ( END )
# 260 "lexer.ml"

  | 24 ->
# 31 "lexer.mll"
                                    ( NOP )
# 265 "lexer.ml"

  | 25 ->
# 32 "lexer.mll"
                                    ( EOF )
# 270 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

