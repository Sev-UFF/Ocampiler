type token =
  | NUMBER of (int)
  | BOOLEAN of (bool)
  | ID of (string)
  | PLUS
  | MINUS
  | TIMESORPOINTER
  | DIV
  | LESS
  | LESSEQUAL
  | GREATER
  | GREATEREQUAL
  | EQUALS
  | AND
  | OR
  | LOOP
  | DO
  | IF
  | THEN
  | ELSE
  | END
  | ASSIGN
  | LET
  | VAR
  | CNS
  | BIND
  | IN
  | COMMA
  | ADDRESS
  | POINTER
  | NEGATION
  | NOP
  | LPAREN
  | RPAREN
  | EOF

open Parsing;;
let _ = parse_error;;
let yytransl_const = [|
  260 (* PLUS *);
  261 (* MINUS *);
  262 (* TIMESORPOINTER *);
  263 (* DIV *);
  264 (* LESS *);
  265 (* LESSEQUAL *);
  266 (* GREATER *);
  267 (* GREATEREQUAL *);
  268 (* EQUALS *);
  269 (* AND *);
  270 (* OR *);
  271 (* LOOP *);
  272 (* DO *);
  273 (* IF *);
  274 (* THEN *);
  275 (* ELSE *);
  276 (* END *);
  277 (* ASSIGN *);
  278 (* LET *);
  279 (* VAR *);
  280 (* CNS *);
  281 (* BIND *);
  282 (* IN *);
  283 (* COMMA *);
  284 (* ADDRESS *);
  285 (* POINTER *);
  286 (* NEGATION *);
  287 (* NOP *);
  288 (* LPAREN *);
  289 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* NUMBER *);
  258 (* BOOLEAN *);
  259 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\004\000\004\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\003\000\
\003\000\003\000\003\000\008\000\008\000\008\000\008\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\004\000\004\000\003\000\005\000\
\007\000\005\000\003\000\002\000\004\000\005\000\003\000\001\000\
\001\000\001\000\003\000\001\000\002\000\002\000\003\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\004\000\004\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\024\000\042\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\077\000\000\000\
\002\000\004\000\000\000\000\000\000\000\000\000\000\000\021\000\
\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\019\000\007\000\041\000\
\076\000\015\000\023\000\000\000\000\000\000\000\000\000\000\000\
\033\000\034\000\037\000\038\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\035\000\036\000\039\000\040\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\005\000\006\000\
\000\000\000\000\000\000\074\000\075\000\000\000\000\000\008\000\
\000\000\010\000\014\000\000\000\009\000"

let yydgoto = "\002\000\
\015\000\016\000\035\000\036\000\019\000\020\000\056\000\022\000"

let yysindex = "\016\000\
\149\255\000\000\000\000\000\000\001\255\017\255\005\255\005\255\
\006\255\023\255\025\255\031\255\004\255\149\255\000\000\039\000\
\000\000\000\000\190\002\133\255\175\255\039\004\005\255\000\000\
\000\000\005\255\036\255\059\255\006\255\054\255\056\255\061\255\
\000\000\082\255\058\255\066\255\224\255\199\000\075\255\205\255\
\000\000\070\255\070\255\070\255\070\255\070\255\070\255\070\255\
\070\255\070\255\082\255\082\255\082\255\001\255\175\255\175\255\
\070\255\070\255\070\255\070\255\070\255\070\255\070\255\070\255\
\082\255\082\255\082\255\000\000\175\255\175\255\175\255\005\255\
\005\255\082\255\190\002\221\000\028\004\000\000\000\000\000\000\
\000\000\000\000\000\000\070\255\254\254\060\255\254\254\060\255\
\000\000\000\000\000\000\000\000\089\255\241\255\089\255\241\255\
\089\255\241\255\089\255\241\255\089\255\241\255\133\255\039\004\
\133\255\039\004\133\255\039\004\254\254\060\255\254\254\060\255\
\000\000\000\000\000\000\000\000\089\255\241\255\089\255\241\255\
\089\255\241\255\089\255\241\255\190\002\133\255\039\004\133\255\
\039\004\133\255\039\004\222\255\255\254\098\003\000\000\000\000\
\224\255\199\000\205\255\000\000\000\000\217\255\251\000\000\000\
\175\255\000\000\000\000\124\003\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\177\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\189\002\209\002\087\000\231\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\253\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\027\000\053\000\079\000\
\000\000\000\000\000\000\000\000\205\000\227\000\249\000\024\001\
\048\001\074\001\100\001\126\001\152\001\178\001\253\002\019\003\
\039\003\066\003\090\003\116\003\105\000\131\000\157\000\183\000\
\000\000\000\000\000\000\000\000\204\001\226\001\248\001\014\002\
\045\002\069\002\095\002\121\002\147\002\142\003\168\003\193\003\
\213\003\233\003\254\003\000\000\000\000\195\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\002\000\014\000\254\255\134\000\255\255\075\000"

let yytablesize = 1341
let yytable = "\021\000\
\025\000\054\000\017\000\044\000\045\000\003\000\004\000\025\000\
\027\000\028\000\006\000\037\000\039\000\007\000\018\000\008\000\
\001\000\145\000\146\000\024\000\009\000\023\000\030\000\037\000\
\068\000\031\000\026\000\032\000\010\000\011\000\055\000\075\000\
\012\000\033\000\013\000\034\000\026\000\029\000\041\000\085\000\
\087\000\089\000\091\000\093\000\095\000\097\000\099\000\101\000\
\075\000\075\000\075\000\069\000\029\000\039\000\109\000\111\000\
\113\000\115\000\117\000\119\000\121\000\123\000\125\000\075\000\
\075\000\059\000\060\000\132\000\133\000\134\000\003\000\137\000\
\025\000\135\000\136\000\006\000\070\000\054\000\030\000\071\000\
\072\000\142\000\003\000\004\000\025\000\073\000\003\000\006\000\
\040\000\007\000\078\000\008\000\042\000\043\000\044\000\045\000\
\009\000\012\000\079\000\000\000\040\000\084\000\000\000\000\000\
\027\000\000\000\055\000\082\000\077\000\012\000\000\000\013\000\
\000\000\074\000\000\000\000\000\086\000\088\000\090\000\092\000\
\094\000\096\000\098\000\100\000\102\000\104\000\106\000\108\000\
\000\000\000\000\028\000\110\000\112\000\114\000\116\000\118\000\
\120\000\122\000\124\000\127\000\129\000\131\000\000\000\148\000\
\051\000\052\000\053\000\038\000\139\000\003\000\004\000\005\000\
\000\000\000\000\006\000\000\000\031\000\000\000\143\000\038\000\
\000\000\000\000\000\000\007\000\000\000\008\000\000\000\076\000\
\000\000\000\000\009\000\010\000\011\000\000\000\000\000\000\000\
\012\000\054\000\013\000\000\000\014\000\000\000\032\000\000\000\
\103\000\105\000\107\000\000\000\000\000\007\000\000\000\008\000\
\000\000\000\000\013\000\000\000\009\000\000\000\126\000\128\000\
\130\000\000\000\000\000\000\000\050\000\000\000\055\000\138\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\000\000\042\000\043\000\044\000\045\000\
\054\000\000\000\051\000\042\000\043\000\044\000\045\000\046\000\
\047\000\048\000\049\000\050\000\007\000\083\000\008\000\000\000\
\000\000\144\000\000\000\009\000\057\000\058\000\059\000\060\000\
\054\000\080\000\000\000\000\000\012\000\055\000\000\000\000\000\
\080\000\000\000\000\000\025\000\025\000\025\000\000\000\000\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\000\000\025\000\055\000\
\000\000\000\000\025\000\000\000\000\000\026\000\026\000\026\000\
\025\000\025\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\058\000\
\026\000\000\000\000\000\000\000\026\000\000\000\000\000\029\000\
\029\000\029\000\026\000\026\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\059\000\029\000\000\000\000\000\000\000\029\000\000\000\
\000\000\030\000\030\000\030\000\029\000\029\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\062\000\030\000\000\000\000\000\000\000\
\030\000\000\000\000\000\027\000\027\000\027\000\030\000\030\000\
\027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\063\000\027\000\000\000\
\000\000\000\000\027\000\000\000\000\000\028\000\028\000\028\000\
\027\000\027\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\047\000\
\028\000\000\000\000\000\000\000\028\000\000\000\000\000\031\000\
\031\000\031\000\028\000\028\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\048\000\031\000\000\000\000\000\000\000\031\000\000\000\
\000\000\032\000\032\000\032\000\031\000\031\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\052\000\032\000\000\000\000\000\050\000\
\032\000\000\000\051\000\052\000\053\000\013\000\032\000\032\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\053\000\050\000\013\000\000\000\051\000\050\000\081\000\
\051\000\052\000\053\000\000\000\050\000\050\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\056\000\
\051\000\000\000\000\000\054\000\051\000\140\000\057\000\058\000\
\059\000\060\000\051\000\051\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\057\000\054\000\012\000\
\012\000\000\000\054\000\000\000\000\000\000\000\000\000\000\000\
\054\000\054\000\055\000\083\000\000\000\012\000\000\000\000\000\
\000\000\000\000\000\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\060\000\055\000\000\000\000\000\
\000\000\055\000\058\000\000\000\000\000\000\000\000\000\055\000\
\055\000\000\000\000\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\061\000\058\000\000\000\000\000\
\000\000\058\000\000\000\000\000\059\000\000\000\000\000\058\000\
\058\000\000\000\000\000\000\000\000\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\064\000\059\000\
\000\000\000\000\000\000\059\000\000\000\000\000\062\000\000\000\
\000\000\059\000\059\000\000\000\000\000\000\000\000\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\065\000\062\000\000\000\000\000\000\000\062\000\000\000\000\000\
\063\000\000\000\000\000\062\000\062\000\000\000\000\000\000\000\
\000\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\049\000\063\000\000\000\000\000\000\000\063\000\
\000\000\000\000\047\000\000\000\000\000\063\000\063\000\000\000\
\000\000\000\000\000\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\000\000\047\000\000\000\000\000\
\020\000\047\000\000\000\000\000\048\000\000\000\000\000\047\000\
\047\000\000\000\000\000\000\000\016\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\000\000\048\000\
\000\000\000\000\000\000\048\000\000\000\000\000\052\000\000\000\
\017\000\048\000\048\000\000\000\000\000\000\000\000\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\000\000\052\000\000\000\000\000\053\000\052\000\018\000\000\000\
\000\000\000\000\000\000\052\000\052\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\000\000\053\000\
\000\000\000\000\056\000\053\000\043\000\000\000\000\000\000\000\
\000\000\053\000\053\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\000\000\056\000\000\000\000\000\
\057\000\056\000\044\000\000\000\000\000\000\000\000\000\056\000\
\056\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\000\000\057\000\000\000\000\000\066\000\057\000\
\000\000\000\000\000\000\000\000\000\000\057\000\057\000\060\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\067\000\060\000\000\000\000\000\000\000\060\000\061\000\
\000\000\000\000\000\000\000\000\060\000\060\000\000\000\000\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\070\000\061\000\000\000\000\000\000\000\061\000\000\000\
\000\000\064\000\000\000\000\000\061\000\061\000\000\000\000\000\
\000\000\000\000\064\000\064\000\064\000\064\000\064\000\064\000\
\064\000\064\000\064\000\071\000\064\000\000\000\000\000\000\000\
\064\000\000\000\000\000\065\000\000\000\000\000\064\000\064\000\
\000\000\000\000\000\000\000\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\065\000\045\000\065\000\000\000\
\000\000\000\000\065\000\000\000\000\000\049\000\000\000\000\000\
\065\000\065\000\000\000\000\000\000\000\000\000\000\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\046\000\
\049\000\000\000\000\000\000\000\049\000\000\000\000\000\000\000\
\000\000\000\000\049\000\049\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\016\000\
\068\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\000\000\016\000\016\000\016\000\016\000\016\000\
\016\000\020\000\016\000\017\000\069\000\000\000\016\000\000\000\
\000\000\000\000\000\000\000\000\016\000\016\000\000\000\017\000\
\017\000\017\000\017\000\017\000\017\000\000\000\017\000\000\000\
\072\000\018\000\017\000\000\000\000\000\000\000\000\000\000\000\
\017\000\017\000\000\000\000\000\000\000\018\000\018\000\018\000\
\018\000\018\000\018\000\000\000\018\000\073\000\000\000\043\000\
\018\000\000\000\000\000\000\000\000\000\000\000\018\000\018\000\
\000\000\000\000\000\000\043\000\043\000\043\000\043\000\043\000\
\043\000\000\000\043\000\000\000\000\000\044\000\043\000\000\000\
\000\000\000\000\000\000\000\000\043\000\043\000\000\000\000\000\
\000\000\044\000\044\000\044\000\044\000\044\000\044\000\000\000\
\044\000\066\000\000\000\000\000\044\000\000\000\000\000\000\000\
\000\000\000\000\044\000\044\000\000\000\066\000\066\000\066\000\
\066\000\066\000\066\000\000\000\066\000\000\000\000\000\000\000\
\066\000\000\000\000\000\000\000\067\000\000\000\066\000\066\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\067\000\067\000\067\000\067\000\067\000\067\000\000\000\067\000\
\000\000\000\000\000\000\067\000\070\000\000\000\000\000\000\000\
\000\000\067\000\067\000\000\000\054\000\000\000\000\000\000\000\
\070\000\070\000\070\000\070\000\070\000\070\000\000\000\070\000\
\007\000\000\000\008\000\070\000\000\000\147\000\071\000\009\000\
\000\000\070\000\070\000\000\000\000\000\000\000\054\000\000\000\
\000\000\055\000\071\000\071\000\071\000\071\000\071\000\071\000\
\000\000\071\000\007\000\000\000\008\000\071\000\000\000\149\000\
\045\000\009\000\000\000\071\000\071\000\000\000\000\000\000\000\
\000\000\000\000\000\000\055\000\045\000\045\000\045\000\045\000\
\045\000\045\000\000\000\045\000\000\000\000\000\000\000\045\000\
\000\000\000\000\046\000\000\000\000\000\045\000\045\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\046\000\046\000\
\046\000\046\000\046\000\046\000\000\000\046\000\000\000\000\000\
\000\000\046\000\000\000\068\000\000\000\000\000\000\000\046\000\
\046\000\000\000\000\000\000\000\000\000\000\000\000\000\068\000\
\068\000\068\000\068\000\068\000\068\000\000\000\068\000\069\000\
\000\000\000\000\068\000\000\000\000\000\000\000\000\000\000\000\
\068\000\068\000\000\000\069\000\069\000\069\000\069\000\069\000\
\069\000\000\000\069\000\072\000\000\000\000\000\069\000\000\000\
\000\000\000\000\000\000\000\000\069\000\069\000\000\000\072\000\
\072\000\072\000\072\000\072\000\072\000\000\000\072\000\000\000\
\073\000\000\000\072\000\000\000\000\000\000\000\000\000\000\000\
\072\000\072\000\000\000\000\000\073\000\073\000\073\000\073\000\
\073\000\073\000\000\000\073\000\000\000\000\000\000\000\073\000\
\000\000\000\000\000\000\000\000\000\000\073\000\073\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\141\000"

let yycheck = "\001\000\
\000\000\003\001\001\000\006\001\007\001\001\001\002\001\003\001\
\007\000\008\000\006\001\014\000\014\000\015\001\001\000\017\001\
\001\000\019\001\020\001\003\001\022\001\021\001\009\000\026\000\
\023\000\003\001\000\000\003\001\023\001\024\001\032\001\034\000\
\028\001\003\001\030\001\032\001\032\001\032\001\000\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\051\000\052\000\053\000\016\001\000\000\055\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\006\001\007\001\069\000\070\000\071\000\001\001\074\000\
\003\001\072\000\073\000\006\001\018\001\003\001\000\000\026\001\
\025\001\084\000\001\001\002\001\003\001\025\001\000\000\006\001\
\014\000\015\001\033\001\017\001\004\001\005\001\006\001\007\001\
\022\001\028\001\033\001\255\255\026\000\032\001\255\255\255\255\
\000\000\255\255\032\001\033\001\034\000\028\001\255\255\030\001\
\255\255\032\001\255\255\255\255\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\050\000\051\000\052\000\053\000\
\255\255\255\255\000\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\255\255\145\000\
\012\001\013\001\014\001\014\000\074\000\001\001\002\001\003\001\
\255\255\255\255\006\001\255\255\000\000\255\255\084\000\026\000\
\255\255\255\255\255\255\015\001\255\255\017\001\255\255\034\000\
\255\255\255\255\022\001\023\001\024\001\255\255\255\255\255\255\
\028\001\003\001\030\001\255\255\032\001\255\255\000\000\255\255\
\051\000\052\000\053\000\255\255\255\255\015\001\255\255\017\001\
\255\255\255\255\000\000\255\255\022\001\255\255\065\000\066\000\
\067\000\255\255\255\255\255\255\000\000\255\255\032\001\074\000\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\004\001\005\001\006\001\007\001\
\003\001\255\255\000\000\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\015\001\033\001\017\001\255\255\
\255\255\020\001\255\255\022\001\004\001\005\001\006\001\007\001\
\000\000\033\001\255\255\255\255\000\000\032\001\255\255\255\255\
\033\001\255\255\255\255\003\001\004\001\005\001\255\255\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\000\000\
\255\255\255\255\026\001\255\255\255\255\003\001\004\001\005\001\
\032\001\033\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\000\000\
\022\001\255\255\255\255\255\255\026\001\255\255\255\255\003\001\
\004\001\005\001\032\001\033\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\000\000\022\001\255\255\255\255\255\255\026\001\255\255\
\255\255\003\001\004\001\005\001\032\001\033\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\000\000\022\001\255\255\255\255\255\255\
\026\001\255\255\255\255\003\001\004\001\005\001\032\001\033\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\000\000\022\001\255\255\
\255\255\255\255\026\001\255\255\255\255\003\001\004\001\005\001\
\032\001\033\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\000\000\
\022\001\255\255\255\255\255\255\026\001\255\255\255\255\003\001\
\004\001\005\001\032\001\033\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\000\000\022\001\255\255\255\255\255\255\026\001\255\255\
\255\255\003\001\004\001\005\001\032\001\033\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\000\000\022\001\255\255\255\255\003\001\
\026\001\255\255\012\001\013\001\014\001\019\001\032\001\033\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\000\000\022\001\033\001\255\255\003\001\026\001\033\001\
\012\001\013\001\014\001\255\255\032\001\033\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\000\000\
\022\001\255\255\255\255\003\001\026\001\033\001\004\001\005\001\
\006\001\007\001\032\001\033\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\000\000\022\001\019\001\
\020\001\255\255\026\001\255\255\255\255\255\255\255\255\255\255\
\032\001\033\001\003\001\033\001\255\255\033\001\255\255\255\255\
\255\255\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\000\000\022\001\255\255\255\255\
\255\255\026\001\003\001\255\255\255\255\255\255\255\255\032\001\
\033\001\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\000\000\022\001\255\255\255\255\
\255\255\026\001\255\255\255\255\003\001\255\255\255\255\032\001\
\033\001\255\255\255\255\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\000\000\022\001\
\255\255\255\255\255\255\026\001\255\255\255\255\003\001\255\255\
\255\255\032\001\033\001\255\255\255\255\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\000\000\022\001\255\255\255\255\255\255\026\001\255\255\255\255\
\003\001\255\255\255\255\032\001\033\001\255\255\255\255\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\000\000\022\001\255\255\255\255\255\255\026\001\
\255\255\255\255\003\001\255\255\255\255\032\001\033\001\255\255\
\255\255\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\022\001\255\255\255\255\
\000\000\026\001\255\255\255\255\003\001\255\255\255\255\032\001\
\033\001\255\255\255\255\255\255\000\000\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\022\001\
\255\255\255\255\255\255\026\001\255\255\255\255\003\001\255\255\
\000\000\032\001\033\001\255\255\255\255\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\022\001\255\255\255\255\003\001\026\001\000\000\255\255\
\255\255\255\255\255\255\032\001\033\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\022\001\
\255\255\255\255\003\001\026\001\000\000\255\255\255\255\255\255\
\255\255\032\001\033\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\022\001\255\255\255\255\
\003\001\026\001\000\000\255\255\255\255\255\255\255\255\032\001\
\033\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\255\255\255\255\000\000\026\001\
\255\255\255\255\255\255\255\255\255\255\032\001\033\001\003\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\000\000\022\001\255\255\255\255\255\255\026\001\003\001\
\255\255\255\255\255\255\255\255\032\001\033\001\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\000\000\022\001\255\255\255\255\255\255\026\001\255\255\
\255\255\003\001\255\255\255\255\032\001\033\001\255\255\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\000\000\022\001\255\255\255\255\255\255\
\026\001\255\255\255\255\003\001\255\255\255\255\032\001\033\001\
\255\255\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\000\000\022\001\255\255\
\255\255\255\255\026\001\255\255\255\255\003\001\255\255\255\255\
\032\001\033\001\255\255\255\255\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\000\000\
\022\001\255\255\255\255\255\255\026\001\255\255\255\255\255\255\
\255\255\255\255\032\001\033\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\003\001\
\000\000\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\033\001\022\001\003\001\000\000\255\255\026\001\255\255\
\255\255\255\255\255\255\255\255\032\001\033\001\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\255\255\
\000\000\003\001\026\001\255\255\255\255\255\255\255\255\255\255\
\032\001\033\001\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\022\001\000\000\255\255\003\001\
\026\001\255\255\255\255\255\255\255\255\255\255\032\001\033\001\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\022\001\255\255\255\255\003\001\026\001\255\255\
\255\255\255\255\255\255\255\255\032\001\033\001\255\255\255\255\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\022\001\003\001\255\255\255\255\026\001\255\255\255\255\255\255\
\255\255\255\255\032\001\033\001\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\022\001\255\255\255\255\255\255\
\026\001\255\255\255\255\255\255\003\001\255\255\032\001\033\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\022\001\
\255\255\255\255\255\255\026\001\003\001\255\255\255\255\255\255\
\255\255\032\001\033\001\255\255\003\001\255\255\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\022\001\
\015\001\255\255\017\001\026\001\255\255\020\001\003\001\022\001\
\255\255\032\001\033\001\255\255\255\255\255\255\003\001\255\255\
\255\255\032\001\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\022\001\015\001\255\255\017\001\026\001\255\255\020\001\
\003\001\022\001\255\255\032\001\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\032\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\255\255\255\255\255\255\026\001\
\255\255\255\255\003\001\255\255\255\255\032\001\033\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\022\001\255\255\255\255\
\255\255\026\001\255\255\003\001\255\255\255\255\255\255\032\001\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\003\001\
\255\255\255\255\026\001\255\255\255\255\255\255\255\255\255\255\
\032\001\033\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\022\001\003\001\255\255\255\255\026\001\255\255\
\255\255\255\255\255\255\255\255\032\001\033\001\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\255\255\
\003\001\255\255\026\001\255\255\255\255\255\255\255\255\255\255\
\032\001\033\001\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\255\255\255\255\255\255\026\001\
\255\255\255\255\255\255\255\255\255\255\032\001\033\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\033\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMESORPOINTER\000\
  DIV\000\
  LESS\000\
  LESSEQUAL\000\
  GREATER\000\
  GREATEREQUAL\000\
  EQUALS\000\
  AND\000\
  OR\000\
  LOOP\000\
  DO\000\
  IF\000\
  THEN\000\
  ELSE\000\
  END\000\
  ASSIGN\000\
  LET\000\
  VAR\000\
  CNS\000\
  BIND\000\
  IN\000\
  COMMA\000\
  ADDRESS\000\
  POINTER\000\
  NEGATION\000\
  NOP\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  NUMBER\000\
  BOOLEAN\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Pi.statement) in
    Obj.repr(
# 24 "parser.mly"
                              ( _1 )
# 561 "parser.ml"
               : Pi.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 27 "parser.mly"
                     ( Pi.Exp(_1))
# 568 "parser.ml"
               : Pi.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pi.command) in
    Obj.repr(
# 28 "parser.mly"
                         (Pi.Cmd(_1))
# 575 "parser.ml"
               : Pi.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pi.declaration) in
    Obj.repr(
# 29 "parser.mly"
                         (Pi.Dec(_1))
# 582 "parser.ml"
               : Pi.statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 32 "parser.mly"
                                          (Pi.Bind(Pi.Id(_2), Pi.Ref(_4)) )
# 590 "parser.ml"
               : Pi.declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 33 "parser.mly"
                                          (Pi.Bind(Pi.Id(_2), _4) )
# 598 "parser.ml"
               : Pi.declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pi.declaration) in
    Obj.repr(
# 34 "parser.mly"
                                                          ( _2 )
# 605 "parser.ml"
               : Pi.declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pi.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pi.command) in
    Obj.repr(
# 37 "parser.mly"
                                                     ( Pi.Loop((_2), _4))
# 613 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pi.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Pi.command) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Pi.command) in
    Obj.repr(
# 38 "parser.mly"
                                                         ( Pi.Cond((_2), _4, _6))
# 622 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pi.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pi.command) in
    Obj.repr(
# 39 "parser.mly"
                                                     ( Pi.Cond((_2), _4, Pi.Nop))
# 630 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 40 "parser.mly"
                                                        ( Pi.Assign(Pi.Id(_1), _3) )
# 638 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Pi.command) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pi.command) in
    Obj.repr(
# 41 "parser.mly"
                                                                ( Pi.CSeq(_1, _2) )
# 646 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pi.declaration) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pi.command) in
    Obj.repr(
# 42 "parser.mly"
                                                        (Pi.Blk(_2, _4))
# 654 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pi.declaration) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pi.command) in
    Obj.repr(
# 43 "parser.mly"
                                                        (Pi.Blk(_2, _4))
# 662 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pi.command) in
    Obj.repr(
# 44 "parser.mly"
                                                      ( _2 )
# 669 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 47 "parser.mly"
                                                    ( Pi.AExp( _1) )
# 676 "parser.ml"
               : Pi.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pi.booleanExpression) in
    Obj.repr(
# 48 "parser.mly"
                                                    ( Pi.BExp( _1) )
# 683 "parser.ml"
               : Pi.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 49 "parser.mly"
                                                    ( _1 )
# 690 "parser.ml"
               : Pi.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pi.expression) in
    Obj.repr(
# 50 "parser.mly"
                                                    ( _2 )
# 697 "parser.ml"
               : Pi.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 54 "parser.mly"
                                                  ( Pi.Id( _1) )
# 704 "parser.ml"
               : Pi.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 55 "parser.mly"
                                                         ( Pi.ValRef(Pi.Id(_2)))
# 711 "parser.ml"
               : Pi.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 56 "parser.mly"
                                                  ( Pi.DeRef(Pi.Id(_2)))
# 718 "parser.ml"
               : Pi.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pi.expression) in
    Obj.repr(
# 57 "parser.mly"
                                                  ( _2 )
# 725 "parser.ml"
               : Pi.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 60 "parser.mly"
                                                              ( Pi.Num(_1) )
# 732 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 61 "parser.mly"
                                                              ( Pi.Sum(Pi.AExp(_1), Pi.AExp(_3) )  )
# 740 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 62 "parser.mly"
                                                                    ( Pi.Sum(Pi.AExp(_1), _3 )  )
# 748 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 63 "parser.mly"
                                                                    ( Pi.Sum(_1, Pi.AExp(_3) )  )
# 756 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 64 "parser.mly"
                                                                          ( Pi.Sum(_1, _3 )  )
# 764 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 65 "parser.mly"
                                                              ( Pi.Sub(Pi.AExp(_1), Pi.AExp(_3) )  )
# 772 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 66 "parser.mly"
                                                                    ( Pi.Sub(Pi.AExp(_1), _3 )  )
# 780 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 67 "parser.mly"
                                                                    ( Pi.Sub(_1, Pi.AExp(_3) )  )
# 788 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 68 "parser.mly"
                                                                          ( Pi.Sub(_1, _3 )  )
# 796 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 69 "parser.mly"
                                                                       ( Pi.Mul(Pi.AExp(_1), Pi.AExp(_3) )  )
# 804 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 70 "parser.mly"
                                                                             ( Pi.Mul(Pi.AExp(_1),_3 )  )
# 812 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 71 "parser.mly"
                                                                             ( Pi.Mul(_1, Pi.AExp(_3) )  )
# 820 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 72 "parser.mly"
                                                                                   ( Pi.Mul(_1, _3 )  )
# 828 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 73 "parser.mly"
                                                              ( Pi.Div(Pi.AExp(_1), Pi.AExp(_3) )  )
# 836 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 74 "parser.mly"
                                                                    ( Pi.Div(Pi.AExp(_1), _3 )  )
# 844 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 75 "parser.mly"
                                                                    ( Pi.Div(_1, Pi.AExp(_3) )  )
# 852 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 76 "parser.mly"
                                                                          ( Pi.Div(_1, _3 )  )
# 860 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pi.arithmeticExpression) in
    Obj.repr(
# 77 "parser.mly"
                                                              ( _2 )
# 867 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 81 "parser.mly"
                                                                      ( Pi.Boo(_1) )
# 874 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.booleanExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.booleanExpression) in
    Obj.repr(
# 82 "parser.mly"
                                                                      ( Pi.Eq( Pi.BExp(_1), Pi.BExp(_3)) )
# 882 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.booleanExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 83 "parser.mly"
                                                                            ( Pi.Eq( Pi.BExp(_1), _3) )
# 890 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.booleanExpression) in
    Obj.repr(
# 84 "parser.mly"
                                                                            ( Pi.Eq( _1, Pi.BExp(_3)) )
# 898 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 85 "parser.mly"
                                                                                  ( Pi.Eq( _1, _3) )
# 906 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 86 "parser.mly"
                                                                      ( Pi.Eq( Pi.AExp(_1), Pi.AExp(_3)) )
# 914 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 87 "parser.mly"
                                                                            ( Pi.Eq( Pi.AExp(_1), _3) )
# 922 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 88 "parser.mly"
                                                                            ( Pi.Eq( _1, Pi.AExp(_3)) )
# 930 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 89 "parser.mly"
                                                                      ( Pi.Lt( (Pi.AExp(_1), Pi.AExp(_3))) )
# 938 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 90 "parser.mly"
                                                                            ( Pi.Lt( (Pi.AExp(_1), _3)) )
# 946 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 91 "parser.mly"
                                                                            ( Pi.Lt( (_1, Pi.AExp(_3))) )
# 954 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 92 "parser.mly"
                                                                                  ( Pi.Lt( (_1, _3)) )
# 962 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 93 "parser.mly"
                                                                      ( Pi.Le( Pi.AExp(_1), Pi.AExp(_3)) )
# 970 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 94 "parser.mly"
                                                                            ( Pi.Le( (Pi.AExp(_1), _3)) )
# 978 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 95 "parser.mly"
                                                                            ( Pi.Le( (_1, Pi.AExp(_3))) )
# 986 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 96 "parser.mly"
                                                                                  ( Pi.Le( (_1, _3)) )
# 994 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 97 "parser.mly"
                                                                      ( Pi.Gt( Pi.AExp(_1), Pi.AExp(_3)) )
# 1002 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 98 "parser.mly"
                                                                            ( Pi.Gt( (Pi.AExp(_1), _3)) )
# 1010 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 99 "parser.mly"
                                                                            ( Pi.Gt( (_1, Pi.AExp(_3))) )
# 1018 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 100 "parser.mly"
                                                                                  ( Pi.Gt( (_1, _3)) )
# 1026 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 101 "parser.mly"
                                                                      ( Pi.Ge( (Pi.AExp(_1), Pi.AExp(_3))) )
# 1034 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 102 "parser.mly"
                                                                            ( Pi.Ge( (Pi.AExp(_1), _3)) )
# 1042 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 103 "parser.mly"
                                                                            ( Pi.Ge( (_1, Pi.AExp(_3))) )
# 1050 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 104 "parser.mly"
                                                                                  ( Pi.Ge( (_1, _3)) )
# 1058 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.booleanExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.booleanExpression) in
    Obj.repr(
# 105 "parser.mly"
                                                                      ( Pi.And( Pi.BExp(_1), Pi.BExp(_3)) )
# 1066 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.booleanExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 106 "parser.mly"
                                                                            ( Pi.And( (Pi.BExp(_1), _3)) )
# 1074 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.booleanExpression) in
    Obj.repr(
# 107 "parser.mly"
                                                                            ( Pi.And( (_1, Pi.BExp(_3))) )
# 1082 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 108 "parser.mly"
                                                                                  ( Pi.And( (_1, _3)) )
# 1090 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.booleanExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.booleanExpression) in
    Obj.repr(
# 109 "parser.mly"
                                                                      ( Pi.Or( Pi.BExp(_1), Pi.BExp(_3)) )
# 1098 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.booleanExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 110 "parser.mly"
                                                                            ( Pi.Or( (Pi.BExp(_1), _3)) )
# 1106 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.booleanExpression) in
    Obj.repr(
# 111 "parser.mly"
                                                                            ( Pi.Or( (_1, Pi.BExp(_3))) )
# 1114 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 112 "parser.mly"
                                                                                  ( Pi.Or( (_1, _3)) )
# 1122 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Pi.booleanExpression) in
    Obj.repr(
# 113 "parser.mly"
                                                                      ( Pi.Not( Pi.BExp(_3) ))
# 1129 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Pi.expression) in
    Obj.repr(
# 114 "parser.mly"
                                                                            ( Pi.Not( _3 ))
# 1136 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pi.booleanExpression) in
    Obj.repr(
# 115 "parser.mly"
                                                                      ( _2 )
# 1143 "parser.ml"
               : Pi.booleanExpression))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Pi.statement)
