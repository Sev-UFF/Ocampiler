type token =
  | NUMBER of (int)
  | BOOLEAN of (bool)
  | ID of (string)
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | LESS
  | LESSEQUAL
  | GREATER
  | GREATEREQUAL
  | EQUALS
  | AND
  | OR
  | LOOP
  | DO
  | IF
  | THEN
  | ELSE
  | END
  | ASSIGN
  | LET
  | VAR
  | BIND
  | IN
  | COMMA
  | DEREF
  | POINTER
  | NEGATION
  | NOP
  | LPAREN
  | RPAREN
  | EOF

open Parsing;;
let _ = parse_error;;
let yytransl_const = [|
  260 (* PLUS *);
  261 (* MINUS *);
  262 (* TIMES *);
  263 (* DIV *);
  264 (* LESS *);
  265 (* LESSEQUAL *);
  266 (* GREATER *);
  267 (* GREATEREQUAL *);
  268 (* EQUALS *);
  269 (* AND *);
  270 (* OR *);
  271 (* LOOP *);
  272 (* DO *);
  273 (* IF *);
  274 (* THEN *);
  275 (* ELSE *);
  276 (* END *);
  277 (* ASSIGN *);
  278 (* LET *);
  279 (* VAR *);
  280 (* BIND *);
  281 (* IN *);
  282 (* COMMA *);
  283 (* DEREF *);
  284 (* POINTER *);
  285 (* NEGATION *);
  286 (* NOP *);
  287 (* LPAREN *);
  288 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* NUMBER *);
  258 (* BOOLEAN *);
  259 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\004\000\004\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\003\000\
\003\000\003\000\003\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\003\000\004\000\003\000\005\000\
\007\000\005\000\003\000\002\000\004\000\005\000\003\000\001\000\
\001\000\001\000\003\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\004\000\004\000\003\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\020\000\038\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\073\000\000\000\002\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\031\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
\000\000\000\000\000\000\000\000\000\000\019\000\007\000\037\000\
\072\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\000\000\000\033\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\006\000\071\000\070\000\008\000\000\000\
\010\000\014\000\000\000\009\000"

let yydgoto = "\002\000\
\012\000\013\000\039\000\040\000\083\000\017\000\060\000"

let yysindex = "\002\000\
\114\255\000\000\000\000\000\000\166\004\052\255\052\255\246\254\
\006\255\237\254\114\255\000\000\015\000\000\000\252\254\195\004\
\010\001\138\004\015\255\046\255\079\255\127\255\141\255\147\255\
\158\255\166\255\069\255\083\255\118\255\052\255\184\004\052\255\
\011\255\026\255\246\254\005\255\032\255\131\255\018\255\232\254\
\066\003\249\254\202\255\000\000\246\254\172\255\176\255\183\255\
\187\255\191\255\197\255\201\255\205\255\208\255\137\255\151\255\
\154\255\036\255\138\004\138\004\051\001\209\255\035\255\051\001\
\035\255\051\001\000\000\051\001\000\000\051\001\076\001\051\001\
\076\001\051\001\076\001\051\001\076\001\184\004\162\255\195\004\
\010\001\184\004\195\004\010\001\184\004\010\001\000\000\138\004\
\138\004\138\004\052\255\114\004\095\255\000\000\000\000\000\000\
\000\000\000\000\252\254\051\001\035\255\051\001\035\255\051\001\
\000\000\051\001\000\000\051\001\076\001\051\001\076\001\051\001\
\076\001\051\001\076\001\051\001\076\001\184\004\010\001\184\004\
\010\001\184\004\010\001\051\001\248\255\184\004\066\003\249\254\
\227\255\226\255\127\004\000\000\000\000\000\000\000\000\138\004\
\000\000\000\000\128\004\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\068\000\012\003\
\037\003\069\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\064\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\003\101\000\000\000\001\000\126\000\
\026\000\151\000\000\000\176\000\000\000\047\001\072\001\097\001\
\122\001\147\001\172\001\197\001\222\001\089\003\000\000\243\002\
\114\003\139\003\000\000\164\003\189\003\214\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\074\000\201\000\051\000\226\000\076\000\251\000\
\000\000\022\001\000\000\247\001\016\002\043\002\068\002\093\002\
\118\002\143\002\168\002\193\002\218\002\239\003\008\004\026\004\
\046\004\064\004\085\004\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\026\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\022\000\003\000\013\000\067\000\255\255"

let yytablesize = 1487
let yytable = "\018\000\
\023\000\045\000\001\000\015\000\055\000\056\000\057\000\095\000\
\037\000\043\000\036\000\038\000\009\000\016\000\044\000\003\000\
\018\000\061\000\016\000\016\000\035\000\045\000\014\000\041\000\
\097\000\027\000\088\000\033\000\034\000\090\000\045\000\063\000\
\065\000\067\000\069\000\071\000\073\000\075\000\077\000\080\000\
\048\000\049\000\016\000\089\000\041\000\062\000\003\000\099\000\
\064\000\094\000\021\000\087\000\003\000\004\000\031\000\091\000\
\030\000\043\000\101\000\103\000\105\000\107\000\109\000\111\000\
\113\000\115\000\117\000\004\000\003\000\003\000\004\000\078\000\
\000\000\005\000\125\000\025\000\062\000\042\000\000\000\003\000\
\010\000\066\000\032\000\003\000\004\000\082\000\129\000\130\000\
\131\000\000\000\000\000\127\000\000\000\081\000\084\000\086\000\
\000\000\010\000\042\000\079\000\024\000\000\000\000\000\016\000\
\093\000\000\000\055\000\056\000\057\000\062\000\000\000\010\000\
\132\000\079\000\003\000\004\000\005\000\000\000\003\000\004\000\
\085\000\119\000\121\000\123\000\000\000\028\000\134\000\003\000\
\006\000\068\000\007\000\003\000\004\000\092\000\139\000\008\000\
\009\000\003\000\004\000\118\000\000\000\003\000\010\000\070\000\
\011\000\128\000\010\000\003\000\079\000\072\000\032\000\003\000\
\004\000\120\000\003\000\004\000\122\000\062\000\003\000\010\000\
\074\000\079\000\003\000\004\000\126\000\010\000\003\000\079\000\
\076\000\000\000\000\000\062\000\003\000\000\000\100\000\036\000\
\003\000\062\000\102\000\010\000\000\000\079\000\010\000\003\000\
\079\000\104\000\000\000\003\000\062\000\106\000\010\000\003\000\
\079\000\108\000\000\000\000\000\062\000\003\000\000\000\110\000\
\022\000\003\000\062\000\112\000\058\000\003\000\062\000\114\000\
\003\000\003\000\116\000\124\000\000\000\062\000\000\000\000\000\
\006\000\062\000\007\000\000\000\000\000\062\000\000\000\008\000\
\000\000\026\000\000\000\062\000\058\000\058\000\000\000\062\000\
\059\000\098\000\000\000\062\000\000\000\000\000\062\000\062\000\
\006\000\006\000\007\000\007\000\136\000\137\000\135\000\008\000\
\008\000\000\000\030\000\046\000\047\000\048\000\049\000\000\000\
\059\000\059\000\000\000\023\000\023\000\023\000\000\000\000\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\034\000\023\000\096\000\
\000\000\023\000\023\000\000\000\027\000\027\000\027\000\023\000\
\023\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\027\000\049\000\027\000\
\018\000\000\000\027\000\027\000\000\000\021\000\021\000\021\000\
\027\000\027\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\048\000\
\021\000\000\000\000\000\021\000\021\000\000\000\025\000\025\000\
\025\000\021\000\021\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\053\000\025\000\005\000\000\000\025\000\025\000\000\000\024\000\
\000\000\005\000\025\000\025\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\052\000\024\000\000\000\000\000\024\000\024\000\000\000\
\028\000\000\000\000\000\024\000\024\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\057\000\028\000\000\000\000\000\028\000\028\000\
\000\000\032\000\000\000\000\000\028\000\028\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\056\000\032\000\000\000\000\000\032\000\
\032\000\000\000\036\000\000\000\000\000\032\000\032\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\061\000\036\000\000\000\000\000\
\036\000\036\000\000\000\022\000\000\000\000\000\036\000\036\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\060\000\022\000\000\000\
\000\000\022\000\022\000\000\000\026\000\000\000\000\000\022\000\
\022\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\047\000\026\000\
\000\000\000\000\026\000\026\000\000\000\030\000\000\000\000\000\
\026\000\026\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\046\000\
\030\000\000\000\000\000\030\000\030\000\055\000\056\000\057\000\
\034\000\030\000\030\000\000\000\000\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\051\000\034\000\000\000\000\000\034\000\034\000\
\000\000\049\000\000\000\000\000\034\000\034\000\019\000\020\000\
\021\000\022\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\050\000\049\000\000\000\000\000\049\000\
\049\000\000\000\048\000\000\000\000\000\049\000\049\000\046\000\
\047\000\048\000\049\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\055\000\048\000\000\000\000\000\
\048\000\048\000\000\000\053\000\000\000\000\000\048\000\048\000\
\000\000\000\000\000\000\000\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\054\000\053\000\000\000\
\000\000\053\000\053\000\000\000\052\000\000\000\000\000\053\000\
\053\000\000\000\000\000\000\000\000\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\059\000\052\000\
\000\000\000\000\052\000\052\000\000\000\057\000\000\000\000\000\
\052\000\052\000\000\000\000\000\000\000\000\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\058\000\
\057\000\000\000\000\000\057\000\057\000\000\000\056\000\000\000\
\000\000\057\000\057\000\000\000\000\000\000\000\000\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\044\000\056\000\000\000\000\000\056\000\056\000\000\000\061\000\
\000\000\000\000\056\000\056\000\000\000\000\000\000\000\000\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\043\000\061\000\000\000\000\000\061\000\061\000\000\000\
\060\000\000\000\000\000\061\000\061\000\000\000\000\000\000\000\
\000\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\045\000\060\000\000\000\000\000\060\000\060\000\
\000\000\047\000\000\000\000\000\060\000\060\000\000\000\000\000\
\012\000\000\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\016\000\047\000\000\000\000\000\047\000\
\047\000\000\000\046\000\000\000\000\000\047\000\047\000\000\000\
\000\000\013\000\000\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\017\000\046\000\000\000\000\000\
\046\000\046\000\000\000\000\000\000\000\051\000\046\000\046\000\
\000\000\000\000\000\000\000\000\000\000\000\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\018\000\
\051\000\000\000\000\000\051\000\051\000\000\000\050\000\000\000\
\000\000\051\000\051\000\000\000\000\000\000\000\000\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\042\000\050\000\000\000\000\000\050\000\050\000\000\000\055\000\
\000\000\000\000\050\000\050\000\000\000\000\000\000\000\000\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\041\000\055\000\000\000\000\000\055\000\055\000\000\000\
\054\000\000\000\000\000\055\000\055\000\000\000\000\000\000\000\
\000\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\065\000\054\000\000\000\000\000\054\000\054\000\
\000\000\059\000\000\000\000\000\054\000\054\000\000\000\000\000\
\000\000\000\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\064\000\059\000\000\000\000\000\059\000\
\059\000\000\000\058\000\000\000\000\000\059\000\059\000\000\000\
\000\000\000\000\000\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\069\000\058\000\000\000\000\000\
\058\000\058\000\000\000\044\000\000\000\000\000\058\000\058\000\
\000\000\000\000\000\000\000\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\068\000\044\000\000\000\
\000\000\044\000\044\000\000\000\043\000\000\000\000\000\044\000\
\044\000\000\000\000\000\000\000\000\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\040\000\043\000\
\000\000\000\000\043\000\043\000\000\000\045\000\000\000\000\000\
\043\000\043\000\000\000\000\000\000\000\000\000\000\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\039\000\
\045\000\000\000\000\000\045\000\045\000\000\000\016\000\000\000\
\000\000\045\000\045\000\012\000\012\000\000\000\000\000\000\000\
\000\000\063\000\016\000\016\000\016\000\016\000\016\000\016\000\
\012\000\016\000\000\000\000\000\016\000\016\000\000\000\017\000\
\000\000\000\000\016\000\016\000\013\000\062\000\000\000\000\000\
\000\000\000\000\000\000\017\000\017\000\017\000\017\000\017\000\
\017\000\013\000\017\000\000\000\000\000\017\000\017\000\067\000\
\000\000\000\000\018\000\017\000\017\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\018\000\018\000\
\018\000\018\000\018\000\018\000\066\000\018\000\000\000\000\000\
\018\000\018\000\000\000\042\000\000\000\000\000\018\000\018\000\
\000\000\096\000\000\000\000\000\000\000\000\000\000\000\042\000\
\042\000\042\000\042\000\042\000\042\000\000\000\042\000\000\000\
\000\000\042\000\042\000\000\000\041\000\000\000\000\000\042\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\041\000\041\000\041\000\041\000\041\000\041\000\000\000\041\000\
\000\000\000\000\041\000\041\000\000\000\065\000\000\000\000\000\
\041\000\041\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\065\000\065\000\065\000\065\000\065\000\065\000\000\000\
\065\000\000\000\000\000\065\000\065\000\000\000\064\000\000\000\
\000\000\065\000\065\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\064\000\064\000\064\000\064\000\064\000\064\000\
\000\000\064\000\000\000\000\000\064\000\064\000\000\000\069\000\
\000\000\000\000\064\000\064\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\069\000\069\000\069\000\069\000\069\000\
\069\000\000\000\069\000\000\000\000\000\069\000\069\000\000\000\
\068\000\000\000\000\000\069\000\069\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\068\000\068\000\068\000\068\000\
\068\000\068\000\000\000\068\000\000\000\000\000\068\000\068\000\
\000\000\040\000\000\000\000\000\068\000\068\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\040\000\040\000\040\000\
\040\000\040\000\040\000\000\000\040\000\000\000\000\000\040\000\
\040\000\000\000\039\000\000\000\000\000\040\000\040\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\039\000\039\000\
\039\000\039\000\039\000\039\000\063\000\039\000\000\000\000\000\
\039\000\039\000\000\000\000\000\000\000\000\000\039\000\039\000\
\063\000\063\000\063\000\063\000\063\000\063\000\000\000\063\000\
\062\000\000\000\063\000\063\000\000\000\000\000\000\000\000\000\
\063\000\063\000\000\000\000\000\062\000\062\000\062\000\062\000\
\062\000\062\000\067\000\062\000\000\000\000\000\062\000\062\000\
\000\000\000\000\000\000\000\000\062\000\062\000\067\000\067\000\
\067\000\067\000\067\000\067\000\000\000\067\000\000\000\066\000\
\067\000\067\000\000\000\000\000\000\000\000\000\067\000\067\000\
\000\000\000\000\000\000\066\000\066\000\066\000\066\000\066\000\
\066\000\000\000\066\000\000\000\000\000\066\000\066\000\000\000\
\000\000\000\000\000\000\066\000\066\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\
\000\000\058\000\058\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\058\000\006\000\006\000\007\000\
\007\000\133\000\138\000\140\000\008\000\008\000\000\000\000\000\
\006\000\000\000\007\000\000\000\000\000\059\000\059\000\008\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\059\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\030\000\019\000\020\000\021\000\022\000\023\000\
\024\000\025\000\026\000\027\000\028\000\029\000\046\000\047\000\
\048\000\049\000\050\000\051\000\052\000\053\000\054\000"

let yycheck = "\001\000\
\000\000\026\001\001\000\001\000\012\001\013\001\014\001\032\001\
\003\001\011\000\008\000\031\001\023\001\001\000\000\000\001\001\
\000\000\003\001\006\000\007\000\031\001\026\001\001\000\011\000\
\032\001\000\000\016\001\006\000\007\000\025\001\026\001\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\006\001\007\001\030\000\018\001\032\000\031\001\001\001\045\000\
\003\001\032\001\000\000\030\000\001\001\002\001\003\001\024\001\
\021\001\059\000\046\000\047\000\048\000\049\000\050\000\051\000\
\052\000\053\000\054\000\000\000\000\000\001\001\002\001\003\001\
\255\255\000\000\062\000\000\000\031\001\011\000\255\255\001\001\
\029\001\003\001\031\001\001\001\002\001\003\001\088\000\089\000\
\090\000\255\255\255\255\079\000\255\255\027\000\028\000\029\000\
\255\255\029\001\032\000\031\001\000\000\255\255\255\255\091\000\
\038\000\255\255\012\001\013\001\014\001\031\001\255\255\029\001\
\091\000\031\001\001\001\002\001\003\001\255\255\001\001\002\001\
\003\001\055\000\056\000\057\000\255\255\000\000\032\001\001\001\
\015\001\003\001\017\001\001\001\002\001\003\001\136\000\022\001\
\023\001\001\001\002\001\003\001\255\255\001\001\029\001\003\001\
\031\001\079\000\029\001\001\001\031\001\003\001\000\000\001\001\
\002\001\003\001\001\001\002\001\003\001\031\001\001\001\029\001\
\003\001\031\001\001\001\002\001\003\001\029\001\001\001\031\001\
\003\001\255\255\255\255\031\001\001\001\255\255\003\001\000\000\
\001\001\031\001\003\001\029\001\255\255\031\001\029\001\001\001\
\031\001\003\001\255\255\001\001\031\001\003\001\029\001\001\001\
\031\001\003\001\255\255\255\255\031\001\001\001\255\255\003\001\
\000\000\001\001\031\001\003\001\003\001\001\001\031\001\003\001\
\001\001\001\001\003\001\003\001\255\255\031\001\255\255\255\255\
\015\001\031\001\017\001\255\255\255\255\031\001\255\255\022\001\
\255\255\000\000\255\255\031\001\003\001\003\001\255\255\031\001\
\031\001\032\001\255\255\031\001\255\255\255\255\031\001\031\001\
\015\001\015\001\017\001\017\001\019\001\020\001\020\001\022\001\
\022\001\255\255\000\000\004\001\005\001\006\001\007\001\255\255\
\031\001\031\001\255\255\003\001\004\001\005\001\255\255\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\000\000\022\001\032\001\
\255\255\025\001\026\001\255\255\003\001\004\001\005\001\031\001\
\032\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\000\000\022\001\
\032\001\255\255\025\001\026\001\255\255\003\001\004\001\005\001\
\031\001\032\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\000\000\
\022\001\255\255\255\255\025\001\026\001\255\255\003\001\004\001\
\005\001\031\001\032\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\000\000\022\001\025\001\255\255\025\001\026\001\255\255\003\001\
\255\255\032\001\031\001\032\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\000\000\022\001\255\255\255\255\025\001\026\001\255\255\
\003\001\255\255\255\255\031\001\032\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\000\000\022\001\255\255\255\255\025\001\026\001\
\255\255\003\001\255\255\255\255\031\001\032\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\000\000\022\001\255\255\255\255\025\001\
\026\001\255\255\003\001\255\255\255\255\031\001\032\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\000\000\022\001\255\255\255\255\
\025\001\026\001\255\255\003\001\255\255\255\255\031\001\032\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\000\000\022\001\255\255\
\255\255\025\001\026\001\255\255\003\001\255\255\255\255\031\001\
\032\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\000\000\022\001\
\255\255\255\255\025\001\026\001\255\255\003\001\255\255\255\255\
\031\001\032\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\000\000\
\022\001\255\255\255\255\025\001\026\001\012\001\013\001\014\001\
\003\001\031\001\032\001\255\255\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\000\000\022\001\255\255\255\255\025\001\026\001\
\255\255\003\001\255\255\255\255\031\001\032\001\004\001\005\001\
\006\001\007\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\000\000\022\001\255\255\255\255\025\001\
\026\001\255\255\003\001\255\255\255\255\031\001\032\001\004\001\
\005\001\006\001\007\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\000\000\022\001\255\255\255\255\
\025\001\026\001\255\255\003\001\255\255\255\255\031\001\032\001\
\255\255\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\000\000\022\001\255\255\
\255\255\025\001\026\001\255\255\003\001\255\255\255\255\031\001\
\032\001\255\255\255\255\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\000\000\022\001\
\255\255\255\255\025\001\026\001\255\255\003\001\255\255\255\255\
\031\001\032\001\255\255\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\000\000\
\022\001\255\255\255\255\025\001\026\001\255\255\003\001\255\255\
\255\255\031\001\032\001\255\255\255\255\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\000\000\022\001\255\255\255\255\025\001\026\001\255\255\003\001\
\255\255\255\255\031\001\032\001\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\000\000\022\001\255\255\255\255\025\001\026\001\255\255\
\003\001\255\255\255\255\031\001\032\001\255\255\255\255\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\000\000\022\001\255\255\255\255\025\001\026\001\
\255\255\003\001\255\255\255\255\031\001\032\001\255\255\255\255\
\000\000\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\000\000\022\001\255\255\255\255\025\001\
\026\001\255\255\003\001\255\255\255\255\031\001\032\001\255\255\
\255\255\000\000\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\000\000\022\001\255\255\255\255\
\025\001\026\001\255\255\255\255\255\255\003\001\031\001\032\001\
\255\255\255\255\255\255\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\000\000\
\022\001\255\255\255\255\025\001\026\001\255\255\003\001\255\255\
\255\255\031\001\032\001\255\255\255\255\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\000\000\022\001\255\255\255\255\025\001\026\001\255\255\003\001\
\255\255\255\255\031\001\032\001\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\000\000\022\001\255\255\255\255\025\001\026\001\255\255\
\003\001\255\255\255\255\031\001\032\001\255\255\255\255\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\000\000\022\001\255\255\255\255\025\001\026\001\
\255\255\003\001\255\255\255\255\031\001\032\001\255\255\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\000\000\022\001\255\255\255\255\025\001\
\026\001\255\255\003\001\255\255\255\255\031\001\032\001\255\255\
\255\255\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\000\000\022\001\255\255\255\255\
\025\001\026\001\255\255\003\001\255\255\255\255\031\001\032\001\
\255\255\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\000\000\022\001\255\255\
\255\255\025\001\026\001\255\255\003\001\255\255\255\255\031\001\
\032\001\255\255\255\255\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\000\000\022\001\
\255\255\255\255\025\001\026\001\255\255\003\001\255\255\255\255\
\031\001\032\001\255\255\255\255\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\000\000\
\022\001\255\255\255\255\025\001\026\001\255\255\003\001\255\255\
\255\255\031\001\032\001\019\001\020\001\255\255\255\255\255\255\
\255\255\000\000\015\001\016\001\017\001\018\001\019\001\020\001\
\032\001\022\001\255\255\255\255\025\001\026\001\255\255\003\001\
\255\255\255\255\031\001\032\001\019\001\000\000\255\255\255\255\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\032\001\022\001\255\255\255\255\025\001\026\001\000\000\
\255\255\255\255\003\001\031\001\032\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\015\001\016\001\
\017\001\018\001\019\001\020\001\000\000\022\001\255\255\255\255\
\025\001\026\001\255\255\003\001\255\255\255\255\031\001\032\001\
\255\255\032\001\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\255\255\
\255\255\025\001\026\001\255\255\003\001\255\255\255\255\031\001\
\032\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\022\001\
\255\255\255\255\025\001\026\001\255\255\003\001\255\255\255\255\
\031\001\032\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\022\001\255\255\255\255\025\001\026\001\255\255\003\001\255\255\
\255\255\031\001\032\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\022\001\255\255\255\255\025\001\026\001\255\255\003\001\
\255\255\255\255\031\001\032\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\022\001\255\255\255\255\025\001\026\001\255\255\
\003\001\255\255\255\255\031\001\032\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\255\255\255\255\025\001\026\001\
\255\255\003\001\255\255\255\255\031\001\032\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\022\001\255\255\255\255\025\001\
\026\001\255\255\003\001\255\255\255\255\031\001\032\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\003\001\022\001\255\255\255\255\
\025\001\026\001\255\255\255\255\255\255\255\255\031\001\032\001\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\022\001\
\003\001\255\255\025\001\026\001\255\255\255\255\255\255\255\255\
\031\001\032\001\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\003\001\022\001\255\255\255\255\025\001\026\001\
\255\255\255\255\255\255\255\255\031\001\032\001\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\022\001\255\255\003\001\
\025\001\026\001\255\255\255\255\255\255\255\255\031\001\032\001\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\022\001\255\255\255\255\025\001\026\001\255\255\
\255\255\255\255\255\255\031\001\032\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\003\001\003\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\003\001\015\001\015\001\017\001\
\017\001\032\001\020\001\020\001\022\001\022\001\255\255\255\255\
\015\001\255\255\017\001\255\255\255\255\031\001\031\001\022\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\031\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\021\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  LESS\000\
  LESSEQUAL\000\
  GREATER\000\
  GREATEREQUAL\000\
  EQUALS\000\
  AND\000\
  OR\000\
  LOOP\000\
  DO\000\
  IF\000\
  THEN\000\
  ELSE\000\
  END\000\
  ASSIGN\000\
  LET\000\
  VAR\000\
  BIND\000\
  IN\000\
  COMMA\000\
  DEREF\000\
  POINTER\000\
  NEGATION\000\
  NOP\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  NUMBER\000\
  BOOLEAN\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Pi.statement) in
    Obj.repr(
# 23 "parser.mly"
                              ( _1 )
# 591 "parser.ml"
               : Pi.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 26 "parser.mly"
                     ( Pi.Exp(_1))
# 598 "parser.ml"
               : Pi.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pi.command) in
    Obj.repr(
# 27 "parser.mly"
                         (Pi.Cmd(_1))
# 605 "parser.ml"
               : Pi.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pi.declaration) in
    Obj.repr(
# 28 "parser.mly"
                        (Pi.Dec(_1))
# 612 "parser.ml"
               : Pi.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.declaration) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.declaration) in
    Obj.repr(
# 31 "parser.mly"
                                          (Pi.DSeq(_1, _3))
# 620 "parser.ml"
               : Pi.declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 32 "parser.mly"
                                          (Pi.Bind(Pi.Id(_2), Pi.Ref(_4)) )
# 628 "parser.ml"
               : Pi.declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pi.declaration) in
    Obj.repr(
# 33 "parser.mly"
                                                          ( _2 )
# 635 "parser.ml"
               : Pi.declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pi.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pi.command) in
    Obj.repr(
# 36 "parser.mly"
                                                     ( Pi.Loop((_2), _4))
# 643 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pi.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Pi.command) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Pi.command) in
    Obj.repr(
# 37 "parser.mly"
                                                         ( Pi.Cond((_2), _4, _6))
# 652 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pi.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pi.command) in
    Obj.repr(
# 38 "parser.mly"
                                                     ( Pi.Cond((_2), _4, Pi.Nop))
# 660 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 39 "parser.mly"
                                                        ( Pi.Assign(Pi.Id(_1), _3) )
# 668 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Pi.command) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pi.command) in
    Obj.repr(
# 40 "parser.mly"
                                                                ( Pi.CSeq(_1, _2) )
# 676 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pi.declaration) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pi.command) in
    Obj.repr(
# 41 "parser.mly"
                                                        (Pi.Blk(_2, _4))
# 684 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pi.declaration) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pi.command) in
    Obj.repr(
# 42 "parser.mly"
                                                        (Pi.Blk(_2, _4))
# 692 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pi.command) in
    Obj.repr(
# 43 "parser.mly"
                                                      ( _2 )
# 699 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 47 "parser.mly"
                                                    ( Pi.AExp( _1) )
# 706 "parser.ml"
               : Pi.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pi.booleanExpression) in
    Obj.repr(
# 48 "parser.mly"
                                                    ( Pi.BExp( _1) )
# 713 "parser.ml"
               : Pi.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 49 "parser.mly"
                                                    ( Pi.Id( _1) )
# 720 "parser.ml"
               : Pi.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pi.expression) in
    Obj.repr(
# 50 "parser.mly"
                                                    ( _2 )
# 727 "parser.ml"
               : Pi.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 54 "parser.mly"
                                                              ( Pi.Num(_1) )
# 734 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 55 "parser.mly"
                                                              ( Pi.Sum(Pi.AExp(_1), Pi.AExp(_3) )  )
# 742 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 56 "parser.mly"
                                                              ( Pi.Sum(Pi.AExp(_1), Pi.Id(_3) )  )
# 750 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 57 "parser.mly"
                                                              ( Pi.Sum(Pi.Id(_1), Pi.AExp(_3) )  )
# 758 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 58 "parser.mly"
                                                              ( Pi.Sum(Pi.Id(_1), Pi.Id(_3) )  )
# 766 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 59 "parser.mly"
                                                              ( Pi.Sub(Pi.AExp(_1), Pi.AExp(_3) )  )
# 774 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 60 "parser.mly"
                                                              ( Pi.Sub(Pi.AExp(_1), Pi.Id(_3) )  )
# 782 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 61 "parser.mly"
                                                              ( Pi.Sub(Pi.Id(_1), Pi.AExp(_3) )  )
# 790 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 62 "parser.mly"
                                                              ( Pi.Sub(Pi.Id(_1), Pi.Id(_3) )  )
# 798 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 63 "parser.mly"
                                                              ( Pi.Mul(Pi.AExp(_1), Pi.AExp(_3) )  )
# 806 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 64 "parser.mly"
                                                              ( Pi.Mul(Pi.AExp(_1), Pi.Id(_3) )  )
# 814 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 65 "parser.mly"
                                                              ( Pi.Mul(Pi.Id(_1), Pi.AExp(_3) )  )
# 822 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 66 "parser.mly"
                                                              ( Pi.Mul(Pi.Id(_1), Pi.Id(_3) )  )
# 830 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 67 "parser.mly"
                                                              ( Pi.Div(Pi.AExp(_1), Pi.AExp(_3) )  )
# 838 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 68 "parser.mly"
                                                              ( Pi.Div(Pi.AExp(_1), Pi.Id(_3) )  )
# 846 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 69 "parser.mly"
                                                              ( Pi.Div(Pi.Id(_1), Pi.AExp(_3) )  )
# 854 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 70 "parser.mly"
                                                              ( Pi.Div(Pi.Id(_1), Pi.Id(_3) )  )
# 862 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pi.arithmeticExpression) in
    Obj.repr(
# 71 "parser.mly"
                                                              ( _2 )
# 869 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 75 "parser.mly"
                                                                      ( Pi.Boo(_1) )
# 876 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.booleanExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.booleanExpression) in
    Obj.repr(
# 76 "parser.mly"
                                                                      ( Pi.Eq( Pi.BExp(_1), Pi.BExp(_3)) )
# 884 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.booleanExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 77 "parser.mly"
                                                                      ( Pi.Eq( Pi.BExp(_1), Pi.Id(_3)) )
# 892 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.booleanExpression) in
    Obj.repr(
# 78 "parser.mly"
                                                                      ( Pi.Eq( Pi.Id(_1), Pi.BExp(_3)) )
# 900 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 79 "parser.mly"
                                                                      ( Pi.Eq( Pi.Id(_1), Pi.Id(_3)) )
# 908 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 80 "parser.mly"
                                                                      ( Pi.Eq( Pi.AExp(_1), Pi.AExp(_3)) )
# 916 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 81 "parser.mly"
                                                                      ( Pi.Eq( Pi.AExp(_1), Pi.Id(_3)) )
# 924 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 82 "parser.mly"
                                                                      ( Pi.Eq( Pi.Id(_1), Pi.AExp(_3)) )
# 932 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 83 "parser.mly"
                                                                      ( Pi.Lt( (Pi.AExp(_1), Pi.AExp(_3))) )
# 940 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 84 "parser.mly"
                                                                      ( Pi.Lt( (Pi.AExp(_1), Pi.Id(_3))) )
# 948 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 85 "parser.mly"
                                                                      ( Pi.Lt( (Pi.Id(_1), Pi.AExp(_3))) )
# 956 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 86 "parser.mly"
                                                                      ( Pi.Lt( (Pi.Id(_1), Pi.Id(_3))) )
# 964 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 87 "parser.mly"
                                                                      ( Pi.Le( Pi.AExp(_1), Pi.AExp(_3)) )
# 972 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 88 "parser.mly"
                                                                      ( Pi.Le( (Pi.AExp(_1), Pi.Id(_3))) )
# 980 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 89 "parser.mly"
                                                                      ( Pi.Le( (Pi.Id(_1), Pi.AExp(_3))) )
# 988 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 90 "parser.mly"
                                                                      ( Pi.Le( (Pi.Id(_1), Pi.Id(_3))) )
# 996 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 91 "parser.mly"
                                                                      ( Pi.Gt( Pi.AExp(_1), Pi.AExp(_3)) )
# 1004 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 92 "parser.mly"
                                                                      ( Pi.Gt( (Pi.AExp(_1), Pi.Id(_3))) )
# 1012 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 93 "parser.mly"
                                                                      ( Pi.Gt( (Pi.Id(_1), Pi.AExp(_3))) )
# 1020 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 94 "parser.mly"
                                                                      ( Pi.Gt( (Pi.Id(_1), Pi.Id(_3))) )
# 1028 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 95 "parser.mly"
                                                                      ( Pi.Ge( (Pi.AExp(_1), Pi.AExp(_3))) )
# 1036 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 96 "parser.mly"
                                                                      ( Pi.Ge( (Pi.AExp(_1), Pi.Id(_3))) )
# 1044 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 97 "parser.mly"
                                                                      ( Pi.Ge( (Pi.Id(_1), Pi.AExp(_3))) )
# 1052 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 98 "parser.mly"
                                                                      ( Pi.Ge( (Pi.Id(_1), Pi.Id(_3))) )
# 1060 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.booleanExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.booleanExpression) in
    Obj.repr(
# 99 "parser.mly"
                                                                      ( Pi.And( Pi.BExp(_1), Pi.BExp(_3)) )
# 1068 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.booleanExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 100 "parser.mly"
                                                                      ( Pi.And( (Pi.BExp(_1), Pi.Id(_3))) )
# 1076 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.booleanExpression) in
    Obj.repr(
# 101 "parser.mly"
                                                                      ( Pi.And( (Pi.Id(_1), Pi.BExp(_3))) )
# 1084 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 102 "parser.mly"
                                                                      ( Pi.And( (Pi.Id(_1), Pi.Id(_3))) )
# 1092 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.booleanExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.booleanExpression) in
    Obj.repr(
# 103 "parser.mly"
                                                                      ( Pi.Or( Pi.BExp(_1), Pi.BExp(_3)) )
# 1100 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.booleanExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 104 "parser.mly"
                                                                      ( Pi.Or( (Pi.BExp(_1), Pi.Id(_3))) )
# 1108 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.booleanExpression) in
    Obj.repr(
# 105 "parser.mly"
                                                                      ( Pi.Or( (Pi.Id(_1), Pi.BExp(_3))) )
# 1116 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 106 "parser.mly"
                                                                      ( Pi.Or( (Pi.Id(_1), Pi.Id(_3))) )
# 1124 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Pi.booleanExpression) in
    Obj.repr(
# 107 "parser.mly"
                                                                      ( Pi.Not( Pi.BExp(_3) ))
# 1131 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 108 "parser.mly"
                                                                      ( Pi.Not( Pi.Id(_3) ))
# 1138 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pi.booleanExpression) in
    Obj.repr(
# 109 "parser.mly"
                                                                      ( _2 )
# 1145 "parser.ml"
               : Pi.booleanExpression))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Pi.statement)
