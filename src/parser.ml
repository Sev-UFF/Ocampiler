type token =
  | NUMBER of (int)
  | BOOLEAN of (bool)
  | ID of (string)
  | PLUS
  | MINUS
  | TIMESORPOINTER
  | DIV
  | LESS
  | LESSEQUAL
  | GREATER
  | GREATEREQUAL
  | EQUALS
  | AND
  | OR
  | LOOP
  | DO
  | IF
  | THEN
  | ELSE
  | END
  | ASSIGN
  | LET
  | VAR
  | CNS
  | BIND
  | IN
  | COMMA
  | ADDRESS
  | POINTER
  | ABS
  | NEGATION
  | NOP
  | LPAREN
  | RPAREN
  | EOF

open Parsing;;
let _ = parse_error;;
let yytransl_const = [|
  260 (* PLUS *);
  261 (* MINUS *);
  262 (* TIMESORPOINTER *);
  263 (* DIV *);
  264 (* LESS *);
  265 (* LESSEQUAL *);
  266 (* GREATER *);
  267 (* GREATEREQUAL *);
  268 (* EQUALS *);
  269 (* AND *);
  270 (* OR *);
  271 (* LOOP *);
  272 (* DO *);
  273 (* IF *);
  274 (* THEN *);
  275 (* ELSE *);
  276 (* END *);
  277 (* ASSIGN *);
  278 (* LET *);
  279 (* VAR *);
  280 (* CNS *);
  281 (* BIND *);
  282 (* IN *);
  283 (* COMMA *);
  284 (* ADDRESS *);
  285 (* POINTER *);
  286 (* ABS *);
  287 (* NEGATION *);
  288 (* NOP *);
  289 (* LPAREN *);
  290 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* NUMBER *);
  258 (* BOOLEAN *);
  259 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\004\000\004\000\004\000\004\000\004\000\
\010\000\010\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\003\000\003\000\003\000\008\000\008\000\
\008\000\008\000\009\000\009\000\009\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\004\000\004\000\003\000\003\000\003\000\
\003\000\003\000\005\000\007\000\005\000\003\000\002\000\004\000\
\005\000\002\000\003\000\002\000\001\000\003\000\001\000\001\000\
\001\000\003\000\001\000\002\000\003\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\004\000\
\004\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\030\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\083\000\000\000\002\000\000\000\
\000\000\000\000\021\000\000\000\027\000\000\000\000\000\018\000\
\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\014\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\022\000\047\000\082\000\019\000\026\000\029\000\000\000\000\000\
\000\000\000\000\000\000\039\000\040\000\043\000\044\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\041\000\042\000\045\000\046\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\007\000\008\000\000\000\000\000\
\000\000\000\000\000\000\080\000\081\000\000\000\000\000\011\000\
\000\000\013\000\004\000\000\000\005\000\000\000\000\000\000\000\
\017\000\000\000\000\000\010\000\000\000\012\000"

let yydgoto = "\002\000\
\013\000\014\000\024\000\032\000\016\000\017\000\056\000\019\000\
\020\000\141\000"

let yysindex = "\011\000\
\007\255\000\000\000\000\000\000\113\255\255\254\120\255\120\255\
\043\255\036\255\253\254\007\255\000\000\042\000\000\000\093\004\
\098\255\004\255\000\000\180\004\000\000\120\255\120\255\000\000\
\000\000\035\255\047\255\117\255\121\255\122\255\043\255\030\255\
\000\000\154\255\093\255\246\255\083\255\128\255\099\255\199\255\
\000\000\017\255\017\255\017\255\017\255\017\255\017\255\017\255\
\017\255\017\255\154\255\154\255\154\255\113\255\004\255\004\255\
\017\255\017\255\017\255\017\255\017\255\017\255\017\255\017\255\
\154\255\154\255\154\255\000\000\004\255\004\255\110\255\115\255\
\136\255\009\255\004\255\043\255\154\255\093\004\180\255\212\255\
\000\000\000\000\000\000\000\000\000\000\000\000\017\255\071\255\
\074\255\071\255\074\255\000\000\000\000\000\000\000\000\177\255\
\230\255\177\255\230\255\177\255\230\255\177\255\230\255\177\255\
\230\255\098\255\180\004\098\255\180\004\098\255\180\004\071\255\
\074\255\071\255\074\255\000\000\000\000\000\000\000\000\177\255\
\230\255\177\255\230\255\177\255\230\255\177\255\230\255\093\004\
\098\255\180\004\098\255\180\004\098\255\180\004\141\004\126\004\
\120\255\169\255\136\255\129\255\000\000\000\000\149\004\131\255\
\246\255\083\255\199\255\000\000\000\000\027\255\225\255\000\000\
\004\255\000\000\000\000\169\255\000\000\237\254\132\255\004\255\
\000\000\150\004\099\255\000\000\004\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\079\004\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\212\002\
\232\002\165\000\000\000\001\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\143\255\148\255\000\000\149\255\151\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\244\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\028\000\055\000\082\000\000\000\000\000\000\000\000\000\215\000\
\240\000\022\001\049\001\076\001\103\001\130\001\157\001\184\001\
\211\001\026\003\051\003\078\003\105\003\132\003\159\003\109\000\
\136\000\163\000\190\000\000\000\000\000\000\000\000\000\236\001\
\005\002\030\002\057\002\084\002\111\002\138\002\165\002\192\002\
\186\003\213\003\233\003\253\003\022\004\047\004\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\249\000\247\254\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\255\000\000"

let yygindex = "\000\000\
\000\000\000\000\040\000\229\255\041\000\249\255\255\255\247\255\
\073\005\039\000"

let yytablesize = 1509
let yytable = "\018\000\
\031\000\025\000\039\000\074\000\037\000\160\000\054\000\003\000\
\004\000\005\000\038\000\001\000\006\000\039\000\081\000\037\000\
\006\000\003\000\007\000\021\000\008\000\007\000\006\000\008\000\
\006\000\009\000\079\000\032\000\009\000\034\000\042\000\043\000\
\044\000\045\000\010\000\076\000\055\000\011\000\033\000\012\000\
\015\000\041\000\142\000\106\000\108\000\110\000\026\000\027\000\
\144\000\087\000\069\000\035\000\036\000\038\000\035\000\075\000\
\076\000\129\000\131\000\133\000\082\000\068\000\035\000\036\000\
\070\000\028\000\029\000\135\000\136\000\146\000\009\000\009\000\
\030\000\143\000\078\000\031\000\044\000\045\000\009\000\059\000\
\060\000\036\000\088\000\090\000\092\000\094\000\096\000\098\000\
\100\000\102\000\104\000\078\000\078\000\078\000\051\000\052\000\
\053\000\112\000\114\000\116\000\118\000\120\000\122\000\124\000\
\126\000\128\000\078\000\078\000\033\000\051\000\052\000\053\000\
\140\000\003\000\004\000\021\000\083\000\145\000\006\000\071\000\
\003\000\004\000\021\000\072\000\073\000\006\000\081\000\150\000\
\157\000\039\000\054\000\037\000\085\000\022\000\137\000\034\000\
\003\000\004\000\021\000\138\000\010\000\006\000\007\000\011\000\
\008\000\023\000\163\000\010\000\037\000\009\000\011\000\162\000\
\023\000\160\000\003\000\004\000\021\000\076\000\165\000\006\000\
\055\000\084\000\037\000\010\000\003\000\164\000\011\000\023\000\
\139\000\003\000\004\000\021\000\024\000\021\000\006\000\025\000\
\155\000\159\000\158\000\036\000\042\000\043\000\044\000\045\000\
\011\000\000\000\077\000\000\000\000\000\038\000\000\000\051\000\
\052\000\053\000\000\000\000\000\036\000\000\000\000\000\011\000\
\000\000\156\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\148\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\000\000\000\000\057\000\058\000\059\000\060\000\
\086\000\057\000\058\000\059\000\060\000\000\000\000\000\057\000\
\000\000\000\000\000\000\015\000\000\000\149\000\000\000\000\000\
\016\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\086\000\031\000\031\000\031\000\000\000\000\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\060\000\031\000\082\000\
\000\000\031\000\031\000\031\000\000\000\000\000\032\000\032\000\
\032\000\031\000\031\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\061\000\032\000\000\000\000\000\032\000\032\000\032\000\000\000\
\000\000\035\000\035\000\035\000\032\000\032\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\064\000\035\000\000\000\000\000\035\000\
\035\000\035\000\000\000\000\000\036\000\036\000\036\000\035\000\
\035\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\065\000\036\000\
\000\000\000\000\036\000\036\000\036\000\000\000\000\000\033\000\
\033\000\033\000\036\000\036\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\068\000\033\000\000\000\000\000\033\000\033\000\033\000\
\000\000\000\000\034\000\034\000\034\000\033\000\033\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\069\000\034\000\000\000\000\000\
\034\000\034\000\034\000\000\000\000\000\037\000\037\000\037\000\
\034\000\034\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\053\000\
\037\000\000\000\000\000\037\000\037\000\037\000\000\000\000\000\
\038\000\038\000\038\000\037\000\037\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\054\000\038\000\000\000\000\000\038\000\038\000\
\038\000\056\000\000\000\000\000\000\000\000\000\038\000\038\000\
\000\000\000\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\058\000\056\000\000\000\000\000\056\000\
\056\000\056\000\057\000\000\000\000\000\000\000\000\000\056\000\
\056\000\000\000\000\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\059\000\057\000\015\000\015\000\
\057\000\057\000\057\000\016\000\000\000\015\000\015\000\000\000\
\057\000\057\000\016\000\016\000\000\000\015\000\000\000\000\000\
\060\000\000\000\016\000\000\000\000\000\062\000\000\000\000\000\
\000\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\000\000\060\000\000\000\000\000\060\000\060\000\
\060\000\000\000\000\000\061\000\000\000\000\000\060\000\060\000\
\063\000\000\000\000\000\000\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\000\000\061\000\000\000\
\000\000\061\000\061\000\061\000\000\000\000\000\064\000\000\000\
\000\000\061\000\061\000\066\000\000\000\000\000\000\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\000\000\064\000\000\000\000\000\064\000\064\000\064\000\000\000\
\000\000\065\000\000\000\000\000\064\000\064\000\067\000\000\000\
\000\000\000\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\000\000\065\000\000\000\000\000\065\000\
\065\000\065\000\000\000\000\000\068\000\000\000\000\000\065\000\
\065\000\070\000\000\000\000\000\000\000\068\000\068\000\068\000\
\068\000\068\000\068\000\068\000\068\000\068\000\000\000\068\000\
\000\000\000\000\068\000\068\000\068\000\000\000\000\000\069\000\
\000\000\000\000\068\000\068\000\071\000\000\000\000\000\000\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
\069\000\000\000\069\000\000\000\000\000\069\000\069\000\069\000\
\000\000\000\000\053\000\000\000\000\000\069\000\069\000\055\000\
\000\000\000\000\000\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\000\000\053\000\000\000\000\000\
\053\000\053\000\053\000\023\000\000\000\054\000\000\000\000\000\
\053\000\053\000\000\000\000\000\000\000\000\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\024\000\
\054\000\000\000\000\000\054\000\054\000\054\000\058\000\000\000\
\000\000\000\000\000\000\054\000\054\000\000\000\000\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\025\000\058\000\000\000\000\000\058\000\058\000\058\000\059\000\
\000\000\000\000\000\000\000\000\058\000\058\000\000\000\000\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\049\000\059\000\000\000\000\000\059\000\059\000\059\000\
\062\000\000\000\000\000\000\000\000\000\059\000\059\000\000\000\
\000\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\050\000\062\000\000\000\000\000\062\000\062\000\
\062\000\000\000\000\000\063\000\000\000\000\000\062\000\062\000\
\000\000\000\000\000\000\000\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\072\000\063\000\000\000\
\000\000\063\000\063\000\063\000\000\000\000\000\066\000\000\000\
\000\000\063\000\063\000\000\000\000\000\000\000\000\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\073\000\066\000\000\000\000\000\066\000\066\000\066\000\000\000\
\000\000\067\000\000\000\000\000\066\000\066\000\000\000\000\000\
\000\000\000\000\067\000\067\000\067\000\067\000\067\000\067\000\
\067\000\067\000\067\000\076\000\067\000\000\000\000\000\067\000\
\067\000\067\000\000\000\000\000\070\000\000\000\000\000\067\000\
\067\000\000\000\000\000\000\000\000\000\070\000\070\000\070\000\
\070\000\070\000\070\000\070\000\070\000\070\000\077\000\070\000\
\000\000\000\000\070\000\070\000\070\000\000\000\000\000\071\000\
\000\000\000\000\070\000\070\000\000\000\000\000\000\000\000\000\
\071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\051\000\071\000\000\000\000\000\071\000\071\000\071\000\
\000\000\000\000\055\000\000\000\000\000\071\000\071\000\000\000\
\000\000\000\000\000\000\000\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\052\000\055\000\023\000\000\000\
\055\000\055\000\055\000\000\000\000\000\000\000\000\000\000\000\
\055\000\055\000\023\000\023\000\023\000\023\000\023\000\023\000\
\074\000\023\000\024\000\000\000\023\000\023\000\023\000\000\000\
\000\000\000\000\000\000\000\000\023\000\023\000\024\000\024\000\
\024\000\024\000\024\000\024\000\075\000\024\000\000\000\000\000\
\024\000\024\000\024\000\025\000\000\000\000\000\000\000\000\000\
\024\000\024\000\000\000\000\000\000\000\000\000\000\000\025\000\
\025\000\025\000\025\000\025\000\025\000\078\000\025\000\000\000\
\000\000\025\000\025\000\025\000\049\000\000\000\000\000\000\000\
\000\000\025\000\025\000\000\000\000\000\000\000\000\000\000\000\
\049\000\049\000\049\000\049\000\049\000\049\000\079\000\049\000\
\000\000\000\000\049\000\049\000\049\000\050\000\000\000\000\000\
\000\000\000\000\049\000\049\000\000\000\000\000\000\000\000\000\
\000\000\050\000\050\000\050\000\050\000\050\000\050\000\000\000\
\050\000\000\000\000\000\050\000\050\000\050\000\027\000\000\000\
\072\000\000\000\000\000\050\000\050\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\072\000\072\000\072\000\072\000\
\072\000\072\000\000\000\072\000\000\000\000\000\072\000\072\000\
\072\000\000\000\000\000\073\000\000\000\000\000\072\000\072\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\073\000\
\073\000\073\000\073\000\073\000\073\000\000\000\073\000\000\000\
\000\000\073\000\073\000\073\000\000\000\000\000\076\000\000\000\
\000\000\073\000\073\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\076\000\076\000\076\000\076\000\076\000\076\000\
\000\000\076\000\000\000\000\000\076\000\076\000\076\000\000\000\
\000\000\077\000\000\000\000\000\076\000\076\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\077\000\077\000\077\000\
\077\000\077\000\077\000\000\000\077\000\000\000\000\000\077\000\
\077\000\077\000\000\000\000\000\051\000\000\000\000\000\077\000\
\077\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\051\000\051\000\051\000\051\000\051\000\051\000\000\000\051\000\
\000\000\000\000\051\000\051\000\051\000\000\000\000\000\052\000\
\000\000\000\000\051\000\051\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\000\052\000\052\000\052\000\052\000\
\052\000\000\000\052\000\074\000\000\000\052\000\052\000\052\000\
\000\000\000\000\000\000\000\000\000\000\052\000\052\000\074\000\
\074\000\074\000\074\000\074\000\074\000\000\000\074\000\075\000\
\000\000\074\000\074\000\074\000\000\000\000\000\000\000\000\000\
\000\000\074\000\074\000\075\000\075\000\075\000\075\000\075\000\
\075\000\000\000\075\000\000\000\000\000\075\000\075\000\075\000\
\078\000\000\000\000\000\000\000\000\000\075\000\075\000\000\000\
\000\000\000\000\000\000\000\000\078\000\078\000\078\000\078\000\
\078\000\078\000\000\000\078\000\000\000\000\000\078\000\078\000\
\078\000\079\000\000\000\000\000\000\000\000\000\078\000\078\000\
\000\000\000\000\000\000\000\000\000\000\079\000\079\000\079\000\
\079\000\079\000\079\000\000\000\079\000\000\000\000\000\079\000\
\079\000\079\000\000\000\000\000\000\000\000\000\000\000\079\000\
\079\000\000\000\027\000\027\000\040\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\000\000\000\000\040\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\000\000\080\000\000\000\000\000\000\000\000\000\000\000\
\027\000\000\000\089\000\091\000\093\000\095\000\097\000\099\000\
\101\000\103\000\105\000\107\000\109\000\111\000\000\000\000\000\
\054\000\113\000\115\000\117\000\119\000\121\000\123\000\125\000\
\127\000\130\000\132\000\134\000\007\000\000\000\008\000\054\000\
\153\000\154\000\000\000\009\000\000\000\147\000\000\000\054\000\
\054\000\000\000\000\000\007\000\000\000\008\000\055\000\151\000\
\152\000\000\000\009\000\007\000\007\000\008\000\008\000\000\000\
\161\000\166\000\009\000\009\000\000\000\055\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\055\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\040\000"

let yycheck = "\001\000\
\000\000\003\001\012\000\031\000\012\000\025\001\003\001\001\001\
\002\001\003\001\012\000\001\000\006\001\023\000\034\001\023\000\
\026\001\001\001\015\001\003\001\017\001\015\001\006\001\017\001\
\034\001\022\001\034\000\000\000\022\001\033\001\004\001\005\001\
\006\001\007\001\028\001\027\001\033\001\031\001\003\001\033\001\
\001\000\000\000\034\001\051\000\052\000\053\000\007\000\008\000\
\076\000\033\001\016\001\012\000\012\000\055\000\000\000\026\001\
\027\001\065\000\066\000\067\000\034\001\022\000\023\000\023\000\
\018\001\023\001\024\001\069\000\070\000\077\000\026\001\027\001\
\030\001\075\000\034\000\033\001\006\001\007\001\034\001\006\001\
\007\001\000\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\052\000\053\000\012\001\013\001\
\014\001\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\000\000\012\001\013\001\014\001\
\073\000\001\001\002\001\003\001\034\001\077\000\006\001\003\001\
\001\001\002\001\003\001\003\001\003\001\006\001\034\001\087\000\
\138\000\139\000\003\001\139\000\034\001\021\001\025\001\000\000\
\001\001\002\001\003\001\025\001\028\001\006\001\015\001\031\001\
\017\001\033\001\156\000\028\001\156\000\022\001\031\001\153\000\
\033\001\025\001\001\001\002\001\003\001\027\001\160\000\006\001\
\033\001\034\001\000\000\028\001\000\000\034\001\031\001\025\001\
\033\001\001\001\002\001\003\001\025\001\025\001\006\001\025\001\
\137\000\139\000\139\000\139\000\004\001\005\001\006\001\007\001\
\031\001\255\255\033\001\255\255\255\255\000\000\255\255\012\001\
\013\001\014\001\255\255\255\255\156\000\255\255\255\255\031\001\
\255\255\033\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\034\001\000\000\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\255\255\004\001\005\001\006\001\007\001\
\034\001\004\001\005\001\006\001\007\001\255\255\255\255\000\000\
\255\255\255\255\255\255\000\000\255\255\034\001\255\255\255\255\
\000\000\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\034\001\003\001\004\001\005\001\255\255\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\000\000\022\001\034\001\
\255\255\025\001\026\001\027\001\255\255\255\255\003\001\004\001\
\005\001\033\001\034\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\000\000\022\001\255\255\255\255\025\001\026\001\027\001\255\255\
\255\255\003\001\004\001\005\001\033\001\034\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\000\000\022\001\255\255\255\255\025\001\
\026\001\027\001\255\255\255\255\003\001\004\001\005\001\033\001\
\034\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\000\000\022\001\
\255\255\255\255\025\001\026\001\027\001\255\255\255\255\003\001\
\004\001\005\001\033\001\034\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\000\000\022\001\255\255\255\255\025\001\026\001\027\001\
\255\255\255\255\003\001\004\001\005\001\033\001\034\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\000\000\022\001\255\255\255\255\
\025\001\026\001\027\001\255\255\255\255\003\001\004\001\005\001\
\033\001\034\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\000\000\
\022\001\255\255\255\255\025\001\026\001\027\001\255\255\255\255\
\003\001\004\001\005\001\033\001\034\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\000\000\022\001\255\255\255\255\025\001\026\001\
\027\001\003\001\255\255\255\255\255\255\255\255\033\001\034\001\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\000\000\022\001\255\255\255\255\025\001\
\026\001\027\001\003\001\255\255\255\255\255\255\255\255\033\001\
\034\001\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\000\000\022\001\019\001\020\001\
\025\001\026\001\027\001\019\001\255\255\026\001\027\001\255\255\
\033\001\034\001\026\001\027\001\255\255\034\001\255\255\255\255\
\003\001\255\255\034\001\255\255\255\255\000\000\255\255\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\255\255\255\255\025\001\026\001\
\027\001\255\255\255\255\003\001\255\255\255\255\033\001\034\001\
\000\000\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\255\255\
\255\255\025\001\026\001\027\001\255\255\255\255\003\001\255\255\
\255\255\033\001\034\001\000\000\255\255\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\022\001\255\255\255\255\025\001\026\001\027\001\255\255\
\255\255\003\001\255\255\255\255\033\001\034\001\000\000\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\022\001\255\255\255\255\025\001\
\026\001\027\001\255\255\255\255\003\001\255\255\255\255\033\001\
\034\001\000\000\255\255\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\022\001\
\255\255\255\255\025\001\026\001\027\001\255\255\255\255\003\001\
\255\255\255\255\033\001\034\001\000\000\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\022\001\255\255\255\255\025\001\026\001\027\001\
\255\255\255\255\003\001\255\255\255\255\033\001\034\001\000\000\
\255\255\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\022\001\255\255\255\255\
\025\001\026\001\027\001\000\000\255\255\003\001\255\255\255\255\
\033\001\034\001\255\255\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\000\000\
\022\001\255\255\255\255\025\001\026\001\027\001\003\001\255\255\
\255\255\255\255\255\255\033\001\034\001\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\000\000\022\001\255\255\255\255\025\001\026\001\027\001\003\001\
\255\255\255\255\255\255\255\255\033\001\034\001\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\000\000\022\001\255\255\255\255\025\001\026\001\027\001\
\003\001\255\255\255\255\255\255\255\255\033\001\034\001\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\000\000\022\001\255\255\255\255\025\001\026\001\
\027\001\255\255\255\255\003\001\255\255\255\255\033\001\034\001\
\255\255\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\000\000\022\001\255\255\
\255\255\025\001\026\001\027\001\255\255\255\255\003\001\255\255\
\255\255\033\001\034\001\255\255\255\255\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\000\000\022\001\255\255\255\255\025\001\026\001\027\001\255\255\
\255\255\003\001\255\255\255\255\033\001\034\001\255\255\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\000\000\022\001\255\255\255\255\025\001\
\026\001\027\001\255\255\255\255\003\001\255\255\255\255\033\001\
\034\001\255\255\255\255\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\000\000\022\001\
\255\255\255\255\025\001\026\001\027\001\255\255\255\255\003\001\
\255\255\255\255\033\001\034\001\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\000\000\022\001\255\255\255\255\025\001\026\001\027\001\
\255\255\255\255\003\001\255\255\255\255\033\001\034\001\255\255\
\255\255\255\255\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\000\000\022\001\003\001\255\255\
\025\001\026\001\027\001\255\255\255\255\255\255\255\255\255\255\
\033\001\034\001\015\001\016\001\017\001\018\001\019\001\020\001\
\000\000\022\001\003\001\255\255\025\001\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\033\001\034\001\015\001\016\001\
\017\001\018\001\019\001\020\001\000\000\022\001\255\255\255\255\
\025\001\026\001\027\001\003\001\255\255\255\255\255\255\255\255\
\033\001\034\001\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\000\000\022\001\255\255\
\255\255\025\001\026\001\027\001\003\001\255\255\255\255\255\255\
\255\255\033\001\034\001\255\255\255\255\255\255\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\000\000\022\001\
\255\255\255\255\025\001\026\001\027\001\003\001\255\255\255\255\
\255\255\255\255\033\001\034\001\255\255\255\255\255\255\255\255\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\022\001\255\255\255\255\025\001\026\001\027\001\000\000\255\255\
\003\001\255\255\255\255\033\001\034\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\255\255\255\255\025\001\026\001\
\027\001\255\255\255\255\003\001\255\255\255\255\033\001\034\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\255\255\
\255\255\025\001\026\001\027\001\255\255\255\255\003\001\255\255\
\255\255\033\001\034\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\022\001\255\255\255\255\025\001\026\001\027\001\255\255\
\255\255\003\001\255\255\255\255\033\001\034\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\022\001\255\255\255\255\025\001\
\026\001\027\001\255\255\255\255\003\001\255\255\255\255\033\001\
\034\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\022\001\
\255\255\255\255\025\001\026\001\027\001\255\255\255\255\003\001\
\255\255\255\255\033\001\034\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\022\001\003\001\255\255\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\033\001\034\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\003\001\
\255\255\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\033\001\034\001\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\022\001\255\255\255\255\025\001\026\001\027\001\
\003\001\255\255\255\255\255\255\255\255\033\001\034\001\255\255\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\255\255\255\255\025\001\026\001\
\027\001\003\001\255\255\255\255\255\255\255\255\033\001\034\001\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\022\001\255\255\255\255\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\033\001\
\034\001\255\255\004\001\005\001\012\000\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\023\000\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\255\255\034\000\255\255\255\255\255\255\255\255\255\255\
\034\001\255\255\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\052\000\053\000\255\255\255\255\
\003\001\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\015\001\255\255\017\001\003\001\
\019\001\020\001\255\255\022\001\255\255\077\000\255\255\003\001\
\003\001\255\255\255\255\015\001\255\255\017\001\033\001\087\000\
\020\001\255\255\022\001\015\001\015\001\017\001\017\001\255\255\
\020\001\020\001\022\001\022\001\255\255\033\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\033\001\033\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\139\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\156\000"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMESORPOINTER\000\
  DIV\000\
  LESS\000\
  LESSEQUAL\000\
  GREATER\000\
  GREATEREQUAL\000\
  EQUALS\000\
  AND\000\
  OR\000\
  LOOP\000\
  DO\000\
  IF\000\
  THEN\000\
  ELSE\000\
  END\000\
  ASSIGN\000\
  LET\000\
  VAR\000\
  CNS\000\
  BIND\000\
  IN\000\
  COMMA\000\
  ADDRESS\000\
  POINTER\000\
  ABS\000\
  NEGATION\000\
  NOP\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  NUMBER\000\
  BOOLEAN\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Pi.statement) in
    Obj.repr(
# 26 "parser.mly"
                              ( _1 )
# 616 "parser.ml"
               : Pi.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 29 "parser.mly"
                         ( Pi.Exp(_1))
# 623 "parser.ml"
               : Pi.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pi.command) in
    Obj.repr(
# 30 "parser.mly"
                         ( Pi.Cmd(_1))
# 630 "parser.ml"
               : Pi.statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 33 "parser.mly"
                                              ( Pi.Bind(Pi.Id(_2), Pi.Ref(_4)) )
# 638 "parser.ml"
               : Pi.declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 34 "parser.mly"
                                              ( Pi.Bind(Pi.Id(_2), _4) )
# 646 "parser.ml"
               : Pi.declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.declaration) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.declaration) in
    Obj.repr(
# 35 "parser.mly"
                                              ( Pi.DSeq(_1, _3) )
# 654 "parser.ml"
               : Pi.declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.statement) in
    Obj.repr(
# 36 "parser.mly"
                                              ( Pi.BindAbs(Pi.Id(_2), _3))
# 662 "parser.ml"
               : Pi.declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pi.declaration) in
    Obj.repr(
# 37 "parser.mly"
                                              ( _2 )
# 669 "parser.ml"
               : Pi.declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.command) in
    Obj.repr(
# 40 "parser.mly"
                                                  ( Pi.Abs(Pi.Formal(_1), _3))
# 677 "parser.ml"
               : Pi.statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pi.statement) in
    Obj.repr(
# 41 "parser.mly"
                                                  ( _2 )
# 684 "parser.ml"
               : Pi.statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pi.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pi.command) in
    Obj.repr(
# 44 "parser.mly"
                                                          ( Pi.Loop((_2), _4))
# 692 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pi.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Pi.command) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Pi.command) in
    Obj.repr(
# 45 "parser.mly"
                                                          ( Pi.Cond((_2), _4, _6))
# 701 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pi.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pi.command) in
    Obj.repr(
# 46 "parser.mly"
                                                          ( Pi.Cond((_2), _4, Pi.Nop))
# 709 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 47 "parser.mly"
                                                          ( Pi.Assign(Pi.Id(_1), _3) )
# 717 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Pi.command) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pi.command) in
    Obj.repr(
# 48 "parser.mly"
                                                          ( Pi.CSeq(_1, _2) )
# 725 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pi.declaration) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pi.command) in
    Obj.repr(
# 49 "parser.mly"
                                                          ( Pi.Blk(_2, _4))
# 733 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pi.declaration) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pi.command) in
    Obj.repr(
# 50 "parser.mly"
                                                          ( Pi.Blk(_2, _4))
# 741 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 51 "parser.mly"
                                                          ( Pi.Call(Pi.Id(_1), Pi.Actual(_2)))
# 749 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pi.command) in
    Obj.repr(
# 52 "parser.mly"
                                                          ( _2 )
# 756 "parser.ml"
               : Pi.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 55 "parser.mly"
                                        ( Pi.DeRef(Pi.Id(_2)))
# 763 "parser.ml"
               : Pi.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 56 "parser.mly"
                                        ( _1 )
# 770 "parser.ml"
               : Pi.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pi.expression) in
    Obj.repr(
# 57 "parser.mly"
                                        ( _2 )
# 777 "parser.ml"
               : Pi.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 60 "parser.mly"
                                              ( Pi.AExp( _1) )
# 784 "parser.ml"
               : Pi.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pi.booleanExpression) in
    Obj.repr(
# 61 "parser.mly"
                                              ( Pi.BExp( _1) )
# 791 "parser.ml"
               : Pi.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 62 "parser.mly"
                                              ( _1 )
# 798 "parser.ml"
               : Pi.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pi.expression) in
    Obj.repr(
# 63 "parser.mly"
                                              ( _2 )
# 805 "parser.ml"
               : Pi.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 67 "parser.mly"
                                      ( Pi.Id( _1) )
# 812 "parser.ml"
               : Pi.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 68 "parser.mly"
                                      ( Pi.ValRef(Pi.Id(_2)))
# 819 "parser.ml"
               : Pi.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pi.expression) in
    Obj.repr(
# 69 "parser.mly"
                                      ( _2 )
# 826 "parser.ml"
               : Pi.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 72 "parser.mly"
                                                                     ( Pi.Num(_1) )
# 833 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 73 "parser.mly"
                                                                     ( Pi.Sum(Pi.AExp(_1), Pi.AExp(_3) )  )
# 841 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 74 "parser.mly"
                                                                     ( Pi.Sum(Pi.AExp(_1), _3 )  )
# 849 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 75 "parser.mly"
                                                                     ( Pi.Sum(_1, Pi.AExp(_3) )  )
# 857 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 76 "parser.mly"
                                                                     ( Pi.Sum(_1, _3 )  )
# 865 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 77 "parser.mly"
                                                                     ( Pi.Sub(Pi.AExp(_1), Pi.AExp(_3) )  )
# 873 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 78 "parser.mly"
                                                                     ( Pi.Sub(Pi.AExp(_1), _3 )  )
# 881 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 79 "parser.mly"
                                                                     ( Pi.Sub(_1, Pi.AExp(_3) )  )
# 889 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 80 "parser.mly"
                                                                     ( Pi.Sub(_1, _3 )  )
# 897 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 81 "parser.mly"
                                                                     ( Pi.Mul(Pi.AExp(_1), Pi.AExp(_3) )  )
# 905 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 82 "parser.mly"
                                                                     ( Pi.Mul(Pi.AExp(_1),_3 )  )
# 913 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 83 "parser.mly"
                                                                     ( Pi.Mul(_1, Pi.AExp(_3) )  )
# 921 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 84 "parser.mly"
                                                                     ( Pi.Mul(_1, _3 )  )
# 929 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 85 "parser.mly"
                                                                     ( Pi.Div(Pi.AExp(_1), Pi.AExp(_3) )  )
# 937 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 86 "parser.mly"
                                                                     ( Pi.Div(Pi.AExp(_1), _3 )  )
# 945 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 87 "parser.mly"
                                                                     ( Pi.Div(_1, Pi.AExp(_3) )  )
# 953 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 88 "parser.mly"
                                                                     ( Pi.Div(_1, _3 )  )
# 961 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pi.arithmeticExpression) in
    Obj.repr(
# 89 "parser.mly"
                                                                     ( _2 )
# 968 "parser.ml"
               : Pi.arithmeticExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 93 "parser.mly"
                                                                     ( Pi.Boo(_1) )
# 975 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.booleanExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.booleanExpression) in
    Obj.repr(
# 94 "parser.mly"
                                                                     ( Pi.Eq( Pi.BExp(_1), Pi.BExp(_3)) )
# 983 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.booleanExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 95 "parser.mly"
                                                                     ( Pi.Eq( Pi.BExp(_1), _3) )
# 991 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.booleanExpression) in
    Obj.repr(
# 96 "parser.mly"
                                                                     ( Pi.Eq( _1, Pi.BExp(_3)) )
# 999 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 97 "parser.mly"
                                                                     ( Pi.Eq( _1, _3) )
# 1007 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 98 "parser.mly"
                                                                     ( Pi.Eq( Pi.AExp(_1), Pi.AExp(_3)) )
# 1015 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 99 "parser.mly"
                                                                     ( Pi.Eq( Pi.AExp(_1), _3) )
# 1023 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 100 "parser.mly"
                                                                     ( Pi.Eq( _1, Pi.AExp(_3)) )
# 1031 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 101 "parser.mly"
                                                                     ( Pi.Lt( (Pi.AExp(_1), Pi.AExp(_3))) )
# 1039 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 102 "parser.mly"
                                                                     ( Pi.Lt( (Pi.AExp(_1), _3)) )
# 1047 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 103 "parser.mly"
                                                                     ( Pi.Lt( (_1, Pi.AExp(_3))) )
# 1055 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 104 "parser.mly"
                                                                     ( Pi.Lt( (_1, _3)) )
# 1063 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 105 "parser.mly"
                                                                     ( Pi.Le( Pi.AExp(_1), Pi.AExp(_3)) )
# 1071 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 106 "parser.mly"
                                                                     ( Pi.Le( (Pi.AExp(_1), _3)) )
# 1079 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 107 "parser.mly"
                                                                     ( Pi.Le( (_1, Pi.AExp(_3))) )
# 1087 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 108 "parser.mly"
                                                                     ( Pi.Le( (_1, _3)) )
# 1095 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 109 "parser.mly"
                                                                     ( Pi.Gt( Pi.AExp(_1), Pi.AExp(_3)) )
# 1103 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 110 "parser.mly"
                                                                     ( Pi.Gt( (Pi.AExp(_1), _3)) )
# 1111 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 111 "parser.mly"
                                                                     ( Pi.Gt( (_1, Pi.AExp(_3))) )
# 1119 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 112 "parser.mly"
                                                                     ( Pi.Gt( (_1, _3)) )
# 1127 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 113 "parser.mly"
                                                                     ( Pi.Ge( (Pi.AExp(_1), Pi.AExp(_3))) )
# 1135 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.arithmeticExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 114 "parser.mly"
                                                                     ( Pi.Ge( (Pi.AExp(_1), _3)) )
# 1143 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.arithmeticExpression) in
    Obj.repr(
# 115 "parser.mly"
                                                                     ( Pi.Ge( (_1, Pi.AExp(_3))) )
# 1151 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 116 "parser.mly"
                                                                     ( Pi.Ge( (_1, _3)) )
# 1159 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.booleanExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.booleanExpression) in
    Obj.repr(
# 117 "parser.mly"
                                                                     ( Pi.And( Pi.BExp(_1), Pi.BExp(_3)) )
# 1167 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.booleanExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 118 "parser.mly"
                                                                     ( Pi.And( (Pi.BExp(_1), _3)) )
# 1175 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.booleanExpression) in
    Obj.repr(
# 119 "parser.mly"
                                                                     ( Pi.And( (_1, Pi.BExp(_3))) )
# 1183 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 120 "parser.mly"
                                                                     ( Pi.And( (_1, _3)) )
# 1191 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.booleanExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.booleanExpression) in
    Obj.repr(
# 121 "parser.mly"
                                                                     ( Pi.Or( Pi.BExp(_1), Pi.BExp(_3)) )
# 1199 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.booleanExpression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 122 "parser.mly"
                                                                     ( Pi.Or( (Pi.BExp(_1), _3)) )
# 1207 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.booleanExpression) in
    Obj.repr(
# 123 "parser.mly"
                                                                     ( Pi.Or( (_1, Pi.BExp(_3))) )
# 1215 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pi.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pi.expression) in
    Obj.repr(
# 124 "parser.mly"
                                                                     ( Pi.Or( (_1, _3)) )
# 1223 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Pi.booleanExpression) in
    Obj.repr(
# 125 "parser.mly"
                                                                     ( Pi.Not( Pi.BExp(_3) ))
# 1230 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Pi.expression) in
    Obj.repr(
# 126 "parser.mly"
                                                                     ( Pi.Not( _3 ))
# 1237 "parser.ml"
               : Pi.booleanExpression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pi.booleanExpression) in
    Obj.repr(
# 127 "parser.mly"
                                                                     ( _2 )
# 1244 "parser.ml"
               : Pi.booleanExpression))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Pi.statement)
